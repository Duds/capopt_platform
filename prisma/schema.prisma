// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// GRAPH-RELATIONAL HYBRID ARCHITECTURE
// ============================================================================

// Core graph structure for flexible relationship modeling
model Node {
  id        String   @id @default(cuid())
  type      String   // 'activity', 'canvas_card', 'control', 'process', 'asset', 'enterprise', 'facility', etc.
  label     String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  outgoingEdges Edge[] @relation("FromNode")
  incomingEdges Edge[] @relation("ToNode")
  
  // Master data relationships
  masterRoles    MasterRole[]
  masterSystems  MasterSystem[]
  masterVendors  MasterVendor[]
  masterHazards  MasterHazard[]
  masterControls MasterControl[]
  
  // Entity relationships
  users          User[]
  enterprises    Enterprise[]
  facilities     Facility[]
  businessUnits  BusinessUnit[]
  departments    Department[]
  businessCanvases BusinessCanvas[]
  processes      Process[]

  @@map("nodes")
}

model Edge {
  fromId       String
  toId         String
  relationType String // 'delivers', 'mitigates', 'depends_on', 'controls', 'operates', 'contains', 'manages', etc.
  metadata     Json   @default("{}")
  createdAt    DateTime @default(now())

  // Relationships
  fromNode Node @relation("FromNode", fields: [fromId], references: [id], onDelete: Cascade)
  toNode   Node @relation("ToNode", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId, relationType])
  @@map("edges")
}

// Master data centralization for reusable concepts
model MasterRole {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  metadata    Json     @default("{}")
  graphNodeId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  graphNode Node? @relation(fields: [graphNodeId], references: [id])

  @@map("master_roles")
}

model MasterSystem {
  id          String   @id @default(cuid())
  name        String
  description String?
  systemType  String?
  vendor      String?
  metadata    Json     @default("{}")
  graphNodeId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  graphNode Node? @relation(fields: [graphNodeId], references: [id])

  @@map("master_systems")
}

model MasterVendor {
  id          String   @id @default(cuid())
  name        String
  description String?
  contactInfo Json?
  metadata    Json     @default("{}")
  graphNodeId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  graphNode Node? @relation(fields: [graphNodeId], references: [id])

  @@map("master_vendors")
}

model MasterHazard {
  id           String   @id @default(cuid())
  name         String
  description  String?
  hazardType   String?
  severityLevel String?
  metadata     Json     @default("{}")
  graphNodeId  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  graphNode Node? @relation(fields: [graphNodeId], references: [id])

  @@map("master_hazards")
}

model MasterControl {
  id                String   @id @default(cuid())
  name              String
  description       String?
  controlType       String?
  effectivenessLevel String?
  metadata          Json     @default("{}")
  graphNodeId       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  graphNode Node? @relation(fields: [graphNodeId], references: [id])

  @@map("master_controls")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      UserRole  @default(USER)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Enterprise relationships
  enterpriseId String?
  departmentId String?

  // Graph node reference
  graphNodeId String?

  // Relationships
  enterprise                 Enterprise?          @relation("EnterpriseUsers", fields: [enterpriseId], references: [id])
  department                 Department?          @relation("DepartmentUsers", fields: [departmentId], references: [id])
  graphNode                  Node?                @relation(fields: [graphNodeId], references: [id])
  createdProcesses           Process[]            @relation("ProcessCreator")
  createdControls            CriticalControl[]    @relation("ControlCreator")
  createdAssets              Asset[]              @relation("AssetCreator")
  maturityAssessments        MaturityAssessment[] @relation("AssessmentCreator")
  auditLogs                  AuditLog[]
  verificationLogs           VerificationLog[]    @relation("VerificationUser")
  riskAlerts                 RiskAlert[]          @relation("AlertAssignee")
  createdCanvasVersions      CanvasVersion[]      @relation("CanvasVersionCreator")
  createdCanvasCollaborators CanvasCollaborator[] @relation("CanvasCollaborator")
  createdCanvasExports       CanvasExport[]       @relation("CanvasExportCreator")
  createdCanvasTemplates     CanvasTemplate[]     @relation("TemplateCreator")
  createdOperatingModels     OperatingModel[]     @relation("OperatingModelCreator")
  createdOperatingModelVersions OperatingModelVersion[] @relation("OperatingModelVersionCreator")
  createdOperatingModelCollaborators OperatingModelCollaborator[] @relation("OperatingModelCollaboratorCreator")
  createdOperatingModelSharingSettings OperatingModelSharingSetting[] @relation("OperatingModelSharingSettingCreator")
  createdOperatingModelExports OperatingModelExport[] @relation("OperatingModelExportCreator")
  createdOperatingModelTemplates OperatingModelTemplate[] @relation("OperatingModelTemplateCreator")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  AUDITOR
  SUPERADMIN
  SECURITY_OFFICER
  DATA_STEWARD
  PROCESS_OWNER
  CONTROL_OWNER
  VIEWER
  EXTERNAL_AUDITOR
  MAINTENANCE
  DOCUMENTATION_SPECIALIST
}

// ============================================================================
// ENTERPRISE INFORMATION SYSTEM
// ============================================================================

model Enterprise {
  id          String   @id @default(cuid())
  name        String
  legalName   String
  abn         String   @unique // Australian Business Number
  acn         String?  @unique // Australian Company Number
  description String?
  industry    String
  sector      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Relationships
  addresses        EnterpriseAddress[]
  facilities       Facility[]
  businessUnits    BusinessUnit[]
  users            User[]              @relation("EnterpriseUsers")
  processes        Process[]
  assets           Asset[]
  bowtieModels     BowtieModel[]
  businessCanvases BusinessCanvas[]    @relation("EnterpriseBusinessCanvases")
  operatingModels  OperatingModel[]    @relation("EnterpriseOperatingModels")
  graphNode        Node?               @relation(fields: [graphNodeId], references: [id])

  @@map("enterprises")
}

model EnterpriseAddress {
  id           String      @id @default(cuid())
  enterpriseId String
  type         AddressType
  street       String
  suburb       String
  city         String
  state        String
  postcode     String
  country      String      @default("Australia")
  isPrimary    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relationships
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  @@map("enterprise_addresses")
}

model Facility {
  id           String         @id @default(cuid())
  enterpriseId String
  name         String
  code         String         @unique // Facility code (e.g., HL001)
  description  String?
  type         FacilityType
  status       FacilityStatus @default(ACTIVE)
  location     String? // Geographic location
  coordinates  String? // GPS coordinates
  capacity     String? // Production capacity
  startDate    DateTime? // Operational start date
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Relationships
  enterprise       Enterprise       @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  graphNode        Node?            @relation(fields: [graphNodeId], references: [id])
  businessUnits    BusinessUnit[]
  assets           Asset[]
  processes        Process[]
  businessCanvases BusinessCanvas[] @relation("FacilityBusinessCanvases")
  operatingModels  OperatingModel[] @relation("FacilityOperatingModels")

  @@map("facilities")
}

model BusinessUnit {
  id           String             @id @default(cuid())
  enterpriseId String
  facilityId   String?
  name         String
  code         String             @unique // Business unit code (e.g., MINING, PROCESSING)
  description  String?
  type         BusinessUnitType
  status       BusinessUnitStatus @default(ACTIVE)
  manager      String? // Business unit manager name
  budget       Decimal? // Annual budget
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Relationships
  enterprise       Enterprise       @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  facility         Facility?        @relation(fields: [facilityId], references: [id])
  graphNode        Node?            @relation(fields: [graphNodeId], references: [id])
  departments      Department[]
  assets           Asset[]
  processes        Process[]
  businessCanvases BusinessCanvas[] @relation("BusinessUnitBusinessCanvases")
  operatingModels  OperatingModel[] @relation("BusinessUnitOperatingModels")

  @@map("business_units")
}

model Department {
  id             String           @id @default(cuid())
  businessUnitId String
  name           String
  code           String           @unique // Department code (e.g., MINING_OP, PROCESSING_MAINT)
  description    String?
  type           DepartmentType
  status         DepartmentStatus @default(ACTIVE)
  manager        String? // Department manager name
  employeeCount  Int? // Number of employees
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Relationships
  businessUnit BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  graphNode    Node?        @relation(fields: [graphNodeId], references: [id])
  users        User[]       @relation("DepartmentUsers")
  assets       Asset[]
  processes    Process[]
  // Legacy relationship - to be removed
  // operatingModels OperatingModel[] @relation("DepartmentOperatingModels")

  @@map("departments")
}

// Enums for Enterprise Information
enum AddressType {
  REGISTERED_OFFICE
  OPERATIONAL_OFFICE
  WAREHOUSE
  SITE_OFFICE
  MAILING_ADDRESS
}

enum FacilityType {
  MINE
  PROCESSING_PLANT
  REFINERY
  SMELTER
  WAREHOUSE
  OFFICE
  LABORATORY
  WORKSHOP
  POWER_STATION
  WATER_TREATMENT
  WASTE_MANAGEMENT
}

enum FacilityStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DECOMMISSIONED
  PLANNED
}

enum BusinessUnitType {
  MINING
  PROCESSING
  MAINTENANCE
  ENGINEERING
  SAFETY
  ENVIRONMENTAL
  FINANCE
  HUMAN_RESOURCES
  IT
  LOGISTICS
  QUALITY_ASSURANCE
  RESEARCH_DEVELOPMENT
}

enum BusinessUnitStatus {
  ACTIVE
  INACTIVE
  PLANNED
  DECOMMISSIONED
}

enum DepartmentType {
  OPERATIONS
  MAINTENANCE
  ENGINEERING
  SAFETY
  ENVIRONMENTAL
  FINANCE
  HUMAN_RESOURCES
  IT
  LOGISTICS
  QUALITY_ASSURANCE
  RESEARCH_DEVELOPMENT
  ADMINISTRATION
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  PLANNED
  DECOMMISSIONED
}

// ============================================================================
// STRATEGIC LAYER
// ============================================================================

model BusinessCanvas {
  id          String       @id @default(cuid())
  name        String
  description String?
  version     String       @default("1.0")
  isActive    Boolean      @default(true)
  status      CanvasStatus @default(DRAFT)
  editMode    EditMode     @default(SINGLE_USER)
  autoSave    Boolean      @default(true)
  lastSaved   DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Enterprise context
  enterpriseId   String?
  facilityId     String?
  businessUnitId String?

  // Canvas hierarchy (for parent-child relationships between canvases)
  parentCanvasId String?

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Enhanced Metadata Fields
  // Legal & Registration
  legalName String?
  abn       String?
  acn       String?

  // Industry Classification
  industry      String? // MANDATORY
  sector        String? // Legacy single sector field
  sectors       String[] // Multi-sector support
  sectorTypes   String[] // Sector type classifications
  primarySector String? // Primary sector code (e.g., "COAL", "PRODUCTION")
  businessType  BusinessType?

  // Geographic & Regional
  regional        RegionalClassification?
  primaryLocation String?
  coordinates     String?

  // Facility & Operations
  facilityType       FacilityType?
  operationalStreams String[] // Array of operational streams

  // Strategic & Financial
  strategicObjective   String?
  valueProposition     String?
  competitiveAdvantage String?
  annualRevenue        Decimal?
  employeeCount        Int?

  // Risk & Compliance
  riskProfile            RiskProfile?
  complianceRequirements String[]
  regulatoryFramework    String[]

  // Relationships
  enterprise    Enterprise?      @relation("EnterpriseBusinessCanvases", fields: [enterpriseId], references: [id])
  facility      Facility?        @relation("FacilityBusinessCanvases", fields: [facilityId], references: [id])
  businessUnit  BusinessUnit?    @relation("BusinessUnitBusinessCanvases", fields: [businessUnitId], references: [id])
  parentCanvas  BusinessCanvas?  @relation("CanvasHierarchy", fields: [parentCanvasId], references: [id])
  childCanvases BusinessCanvas[] @relation("CanvasHierarchy")
  graphNode     Node?            @relation(fields: [graphNodeId], references: [id])

  // Canvas content
  valuePropositions ValueProposition[]
  customerSegments  CustomerSegment[]
  revenueStreams    RevenueStream[]
  partnerships      Partnership[]
  resources         Resource[]
  activities        Activity[]
  costStructures    CostStructure[]
  channels          Channel[]

  // Version control and collaboration
  versions        CanvasVersion[]
  collaborators   CanvasCollaborator[]
  sharingSettings CanvasSharingSetting[]
  exportHistory   CanvasExport[]
  templateSource  CanvasTemplate?        @relation("TemplateSource", fields: [templateId], references: [id])
  templateId      String?

  // Business Canvas Framework Associations
  frameworkOperationalStreams   BusinessCanvasOperationalStreams[]
  frameworkComplianceFrameworks BusinessCanvasComplianceFrameworks[]
  frameworkFacilityTypes        BusinessCanvasFacilityTypes[]

  // Enhanced relationships
  patternApplications PatternApplication[]
  operatingModels     OperatingModel[] @relation("BusinessCanvasOperatingModels")

  @@map("business_canvases")
}

// ============================================================================
// CANVAS METADATA FRAMEWORK TABLES
// ============================================================================

// Industry master table
model Industry {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "MINING_METALS", "OIL_GAS"
  name        String // e.g., "Mining & Metals", "Oil & Gas"
  description String?
  category    String? // e.g., "EXTRACTIVE", "MANUFACTURING", "SERVICES"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  sectors                           Sector[]
  facilityTypes                     IndustryFacilityTypes[]
  operationalStreams                IndustryOperationalStreams[]
  complianceFrameworks              IndustryComplianceFramework[]
  facilityTypeAssociations          IndustryFacilityTypeAssociation[]
  operationalStreamAssociations     IndustryOperationalStreamAssociation[]
  complianceRequirementAssociations IndustryComplianceRequirementAssociation[]
  regulatoryFrameworkAssociations   IndustryRegulatoryFrameworkAssociation[]

  @@map("industries")
}

// Industry-specific facility types
model IndustryFacilityTypes {
  id               String   @id @default(cuid())
  facilityTypeCode String // e.g., "OPEN_PIT_MINE", "UNDERGROUND_MINE", "REFINERY"
  facilityTypeName String // e.g., "Open Pit Mine", "Underground Mine", "Refinery"
  description      String?
  category         String // e.g., "EXTRACTION", "PROCESSING", "INFRASTRUCTURE", "SUPPORT"
  riskProfile      String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  industryId       String
  isActive         Boolean  @default(true)
  sortOrder        Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  industry                   Industry                      @relation(fields: [industryId], references: [id], onDelete: Cascade)
  businessCanvasAssociations BusinessCanvasFacilityTypes[]

  @@unique([industryId, facilityTypeCode])
  @@map("industry_facility_types")
}

// Sector master table
model Sector {
  id          String   @id @default(cuid())
  code        String // e.g., "COPPER", "GOLD", "AEROSPACE"
  name        String // e.g., "Copper Mining", "Gold Mining", "Aerospace"
  description String?
  category    String // e.g., "COMMODITY", "VALUE_CHAIN", "BUSINESS_MODEL", "SUPPORT_SERVICES"
  riskProfile String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  industryId  String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  industry                          Industry                                   @relation(fields: [industryId], references: [id], onDelete: Cascade)
  operationalStreamAssociations     IndustryOperationalStreamAssociation[]
  complianceRequirementAssociations IndustryComplianceRequirementAssociation[]
  regulatoryFrameworkAssociations   IndustryRegulatoryFrameworkAssociation[]

  @@unique([industryId, code])
  @@map("sectors")
}

// ============================================================================
// MASTER TABLES (Common Elements)
// ============================================================================

// Master table for all facility types
model FacilityTypeMaster {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "OPEN_PIT_MINE", "REFINERY"
  name        String // e.g., "Open Pit Mine", "Refinery"
  description String?
  category    String // e.g., "EXTRACTION", "PROCESSING", "INFRASTRUCTURE", "SUPPORT"
  riskProfile String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  industryAssociations       IndustryFacilityTypeAssociation[]
  businessCanvasAssociations BusinessCanvasFacilityTypes[]

  @@map("facility_types")
}

// Master table for all operational streams
model OperationalStream {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "OPEN_PIT_MINING", "SAFETY_SYSTEMS"
  name        String // e.g., "Open Pit Mining", "Safety Systems"
  description String?
  category    String // e.g., "EXTRACTION", "PROCESSING", "SAFETY", "ENVIRONMENTAL"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  industryAssociations       IndustryOperationalStreamAssociation[]
  businessCanvasAssociations BusinessCanvasOperationalStreams[]

  @@map("operational_streams")
}

// Master table for all compliance requirements
model ComplianceRequirement {
  id           String   @id @default(cuid())
  code         String   @unique // e.g., "WHS_ACT_2011", "ENVIRONMENTAL_PROTECTION_ACT"
  name         String // e.g., "WHS Act 2011", "Environmental Protection Act"
  description  String?
  category     String // e.g., "FEDERAL", "STATE", "INDUSTRY", "INTERNATIONAL"
  jurisdiction String // e.g., "AUSTRALIA", "INTERNATIONAL"
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  industryAssociations       IndustryComplianceRequirementAssociation[]
  businessCanvasAssociations BusinessCanvasComplianceFrameworks[]

  @@map("compliance_requirements")
}

// Master table for all regulatory frameworks
model RegulatoryFramework {
  id           String   @id @default(cuid())
  code         String   @unique // e.g., "ISO_14001", "ICMM_FRAMEWORK"
  name         String // e.g., "ISO 14001 Environmental Management", "ICMM Framework"
  description  String?
  category     String // e.g., "ISO", "INDUSTRY", "INTERNATIONAL"
  jurisdiction String // e.g., "INTERNATIONAL", "AUSTRALIA"
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  industryAssociations       IndustryRegulatoryFrameworkAssociation[]
  businessCanvasAssociations BusinessCanvasComplianceFrameworks[]

  @@map("regulatory_frameworks")
}

// ============================================================================
// ASSOCIATION TABLES (Industry-Specific Relationships)
// ============================================================================

// Industry-Facility Type associations with customization
model IndustryFacilityTypeAssociation {
  id                String   @id @default(cuid())
  industryId        String
  facilityTypeId    String
  isApplicable      Boolean  @default(true)
  riskProfile       String? // Override default risk profile
  customName        String? // Industry-specific name override
  customDescription String? // Industry-specific description
  sortOrder         Int      @default(0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  industry     Industry           @relation(fields: [industryId], references: [id], onDelete: Cascade)
  facilityType FacilityTypeMaster @relation(fields: [facilityTypeId], references: [id], onDelete: Cascade)

  @@unique([industryId, facilityTypeId])
  @@map("industry_facility_type_associations")
}

// Industry-Operational Stream associations with customization
model IndustryOperationalStreamAssociation {
  id                  String   @id @default(cuid())
  industryId          String
  sectorId            String? // Optional sector-specific association
  operationalStreamId String
  isApplicable        Boolean  @default(true)
  customName          String? // Industry-specific name override
  customDescription   String? // Industry-specific description
  sortOrder           Int      @default(0)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  industry          Industry          @relation(fields: [industryId], references: [id], onDelete: Cascade)
  sector            Sector?           @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  operationalStream OperationalStream @relation(fields: [operationalStreamId], references: [id], onDelete: Cascade)

  @@unique([industryId, sectorId, operationalStreamId])
  @@map("industry_operational_stream_associations")
}

// Industry-Compliance Requirement associations
model IndustryComplianceRequirementAssociation {
  id                      String   @id @default(cuid())
  industryId              String
  sectorId                String? // Optional sector-specific association
  complianceRequirementId String
  isApplicable            Boolean  @default(true)
  priority                String? // HIGH, MEDIUM, LOW
  customDescription       String? // Industry-specific description
  sortOrder               Int      @default(0)
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relationships
  industry              Industry              @relation(fields: [industryId], references: [id], onDelete: Cascade)
  sector                Sector?               @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  complianceRequirement ComplianceRequirement @relation(fields: [complianceRequirementId], references: [id], onDelete: Cascade)

  @@unique([industryId, sectorId, complianceRequirementId])
  @@map("industry_compliance_requirement_associations")
}

// Industry-Regulatory Framework associations
model IndustryRegulatoryFrameworkAssociation {
  id                    String   @id @default(cuid())
  industryId            String
  sectorId              String? // Optional sector-specific association
  regulatoryFrameworkId String
  isApplicable          Boolean  @default(true)
  priority              String? // HIGH, MEDIUM, LOW
  customDescription     String? // Industry-specific description
  sortOrder             Int      @default(0)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  industry            Industry            @relation(fields: [industryId], references: [id], onDelete: Cascade)
  sector              Sector?             @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  regulatoryFramework RegulatoryFramework @relation(fields: [regulatoryFrameworkId], references: [id], onDelete: Cascade)

  @@unique([industryId, sectorId, regulatoryFrameworkId])
  @@map("industry_regulatory_framework_associations")
}

// Industry Operational Streams mapping
model IndustryOperationalStreams {
  id          String   @id @default(cuid())
  industryId  String
  sector      String
  streamName  String
  description String?
  category    String // e.g., "EXTRACTION", "PROCESSING", "SAFETY", "ENVIRONMENTAL"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  industry                   Industry                           @relation(fields: [industryId], references: [id], onDelete: Cascade)
  businessCanvasAssociations BusinessCanvasOperationalStreams[]

  @@unique([industryId, sector, streamName])
  @@map("industry_operational_streams")
}

// Industry Compliance Framework mapping
model IndustryComplianceFramework {
  id                     String   @id @default(cuid())
  industryId             String
  sector                 String
  frameworkName          String
  description            String?
  category               String // e.g., "FEDERAL", "STATE", "INDUSTRY", "INTERNATIONAL"
  complianceRequirements Json // Array of compliance requirements
  regulatoryFramework    Json // Object with Federal, State, Industry arrays
  isActive               Boolean  @default(true)
  sortOrder              Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relationships
  industry                   Industry                             @relation(fields: [industryId], references: [id], onDelete: Cascade)
  businessCanvasAssociations BusinessCanvasComplianceFrameworks[]

  @@unique([industryId, sector, frameworkName])
  @@map("industry_compliance_frameworks")
}

// Version control for canvases
model CanvasVersion {
  id               String   @id @default(cuid())
  businessCanvasId String
  versionNumber    String
  description      String?
  changes          Json? // Store detailed change information
  createdById      String
  createdAt        DateTime @default(now())

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  createdBy      User           @relation("CanvasVersionCreator", fields: [createdById], references: [id])

  @@unique([businessCanvasId, versionNumber])
  @@map("canvas_versions")
}

// Collaboration support
model CanvasCollaborator {
  id               String           @id @default(cuid())
  businessCanvasId String
  userId           String
  role             CollaboratorRole @default(VIEWER)
  permissions      Json? // Store specific permissions
  lastActivity     DateTime?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  user           User           @relation("CanvasCollaborator", fields: [userId], references: [id])

  @@unique([businessCanvasId, userId])
  @@map("canvas_collaborators")
}

// Sharing settings
model CanvasSharingSetting {
  id               String      @id @default(cuid())
  businessCanvasId String
  type             SharingType
  value            String // URL, email, or other sharing identifier
  permissions      Json? // Store sharing permissions
  expiresAt        DateTime?
  isActive         Boolean     @default(true)
  createdAt        DateTime    @default(now())

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("canvas_sharing_settings")
}

// Export history
model CanvasExport {
  id               String       @id @default(cuid())
  businessCanvasId String
  format           ExportFormat
  fileName         String
  fileSize         Int?
  exportedById     String
  metadata         Json? // Store export metadata
  createdAt        DateTime     @default(now())

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  exportedBy     User           @relation("CanvasExportCreator", fields: [exportedById], references: [id])

  @@map("canvas_exports")
}

// Canvas templates
model CanvasTemplate {
  id          String           @id @default(cuid())
  name        String
  description String?
  category    TemplateCategory
  tags        String[] // Array of tags
  thumbnail   String? // URL to thumbnail image
  canvas      Json // Store the template canvas structure
  usageCount  Int              @default(0)
  rating      Float            @default(0)
  isPublic    Boolean          @default(false)
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  createdBy       User             @relation("TemplateCreator", fields: [createdById], references: [id])
  derivedCanvases BusinessCanvas[] @relation("TemplateSource")

  @@map("canvas_templates")
}

model ValueProposition {
  id               String   @id @default(cuid())
  businessCanvasId String
  description      String
  priority         Priority @default(MEDIUM)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("value_propositions")
}

model CustomerSegment {
  id               String   @id @default(cuid())
  businessCanvasId String
  name             String
  description      String?
  size             Int?
  priority         Priority @default(MEDIUM)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("customer_segments")
}

model RevenueStream {
  id               String   @id @default(cuid())
  businessCanvasId String
  type             String
  description      String?
  estimatedValue   Float?
  frequency        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("revenue_streams")
}

model Partnership {
  id               String   @id @default(cuid())
  businessCanvasId String
  name             String
  type             String?
  description      String?
  value            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  
  // OMC Integration - link to Suppliers
  operatingModelSuppliers OperatingModelSupplier[] @relation("SupplierPartnership")

  @@map("partnerships")
}

model Resource {
  id               String       @id @default(cuid())
  businessCanvasId String
  name             String
  type             ResourceType
  description      String?
  availability     String?
  cost             Float?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Activity {
  id               String   @id @default(cuid())
  businessCanvasId String
  name             String
  description      String?
  priority         Priority @default(MEDIUM)
  cost             Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model CostStructure {
  id               String   @id @default(cuid())
  businessCanvasId String
  description      String
  category         String?
  amount           Float?
  frequency        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("cost_structures")
}

model Channel {
  id               String   @id @default(cuid())
  businessCanvasId String
  type             String
  description      String?
  effectiveness    String?
  cost             Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("channels")
}

// Operating Model Canvas
model OperatingModel {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0")
  isActive    Boolean  @default(true)
  status      CanvasStatus @default(DRAFT)
  editMode    EditMode @default(SINGLE_USER)
  autoSave    Boolean  @default(true)
  lastSaved   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enterprise context
  enterpriseId   String?
  facilityId     String?
  businessUnitId String?

  // Operating Model hierarchy (for parent-child relationships)
  parentOperatingModelId String?

  // Business Canvas linkage
  businessCanvasId String?

  // Relationships
  enterprise    Enterprise?      @relation("EnterpriseOperatingModels", fields: [enterpriseId], references: [id])
  facility      Facility?        @relation("FacilityOperatingModels", fields: [facilityId], references: [id])
  businessUnit  BusinessUnit?    @relation("BusinessUnitOperatingModels", fields: [businessUnitId], references: [id])
  parentOperatingModel OperatingModel? @relation("OperatingModelHierarchy", fields: [parentOperatingModelId], references: [id])
  childOperatingModels OperatingModel[] @relation("OperatingModelHierarchy")
  businessCanvas BusinessCanvas? @relation("BusinessCanvasOperatingModels", fields: [businessCanvasId], references: [id])

  // Campbell, Lancelott, Gutierrez Operating Model Components
  suppliers         OperatingModelSupplier[]
  locations         OperatingModelLocation[]
  valueChains       OperatingModelValueChain[]
  organisation      OperatingModelOrganisation[]
  information       OperatingModelInformation[]
  managementSystems OperatingModelManagementSystem[]
  
  // Legacy components (to be deprecated)
  legacyValueChains ValueChain[]

  // Version control and collaboration
  versions        OperatingModelVersion[]
  collaborators   OperatingModelCollaborator[]
  sharingSettings OperatingModelSharingSetting[]
  exportHistory   OperatingModelExport[]
  templateSource  OperatingModelTemplate? @relation("TemplateSource", fields: [templateId], references: [id])
  templateId      String?

  // Creator relationships
  createdBy       String
  creator         User @relation("OperatingModelCreator", fields: [createdBy], references: [id])

  @@map("operating_models")
}

// ============================================================================
// CAMPBELL, LANCELOTT, GUTIERREZ OPERATING MODEL COMPONENTS
// ============================================================================

model OperatingModelSupplier {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  supplierType     SupplierType
  category         String
  criticality      SupplierCriticality
  performance      SupplierPerformance
  contractType     ContractType
  contractValue    Decimal?
  contractDuration Int? // months
  riskLevel        RiskLevel
  complianceStatus ComplianceStatus
  location         String?
  contactPerson    String?
  contactEmail     String?
  contactPhone     String?
  website          String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  
  // BMC Integration - link to Partnerships
  businessCanvasPartnershipId String?
  businessCanvasPartnership   Partnership? @relation("SupplierPartnership", fields: [businessCanvasPartnershipId], references: [id])

  @@map("operating_model_suppliers")
}

model OperatingModelLocation {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  locationType     LocationType
  address          String
  city             String
  state            String
  postcode         String
  country          String
  coordinates      String? // lat,lng
  capacity         String?
  utilization      Int? // percentage
  status           LocationStatus
  criticality      LocationCriticality
  costCenter       String?
  manager          String?
  employeeCount    Int?
  operationalHours String?
  timezone         String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  
  // BMC Integration - link to Resources and Activities
  businessCanvasResourceIds String[] // Array of Resource IDs
  businessCanvasActivityIds String[] // Array of Activity IDs

  @@map("operating_model_locations")
}

model OperatingModelValueChain {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  valueChainType   ValueChainType
  sequence         Int
  complexity       ValueChainComplexity
  efficiency       Int? // percentage
  cost             Decimal?
  duration         Int? // days
  riskLevel        RiskLevel
  status           ValueChainStatus
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  activities     OperatingModelValueChainActivity[]
  inputs         OperatingModelValueChainInput[]
  outputs        OperatingModelValueChainOutput[]
  metrics        OperatingModelValueChainMetric[]
  
  // BMC Integration - link to Activities and Resources
  businessCanvasActivityIds String[] // Array of Activity IDs
  businessCanvasResourceIds String[] // Array of Resource IDs

  @@map("operating_model_value_chains")
}

model OperatingModelValueChainActivity {
  id                    String   @id @default(cuid())
  operatingModelValueChainId String
  name                  String
  description           String?
  activityType          ValueChainActivityType
  sequence              Int
  duration              Int // minutes
  cost                  Decimal?
  efficiency            Int? // percentage
  automation            Int? // percentage
  skillLevel            SkillLevel
  resources             String[] // Array of resource IDs
  dependencies          String[] // Array of activity IDs
  risks                 String[] // Array of risk descriptions
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  valueChain OperatingModelValueChain @relation(fields: [operatingModelValueChainId], references: [id], onDelete: Cascade)

  @@map("operating_model_value_chain_activities")
}

model OperatingModelValueChainInput {
  id                    String   @id @default(cuid())
  operatingModelValueChainId String
  name                  String
  description           String?
  inputType             ValueChainInputType
  source                String
  quantity              String
  quality               String
  cost                  Decimal?
  leadTime              Int? // days
  reliability           Int? // percentage
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  valueChain OperatingModelValueChain @relation(fields: [operatingModelValueChainId], references: [id], onDelete: Cascade)

  @@map("operating_model_value_chain_inputs")
}

model OperatingModelValueChainOutput {
  id                    String   @id @default(cuid())
  operatingModelValueChainId String
  name                  String
  description           String?
  outputType            ValueChainOutputType
  customer              String
  quantity              String
  quality               String
  value                 Decimal?
  deliveryTime          Int? // days
  satisfaction          Int? // percentage
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  valueChain OperatingModelValueChain @relation(fields: [operatingModelValueChainId], references: [id], onDelete: Cascade)

  @@map("operating_model_value_chain_outputs")
}

model OperatingModelValueChainMetric {
  id                    String   @id @default(cuid())
  operatingModelValueChainId String
  name                  String
  description           String?
  metricType            ValueChainMetricType
  unit                  String
  target                Decimal
  current               Decimal
  frequency             MetricFrequency
  trend                 MetricTrend
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  valueChain OperatingModelValueChain @relation(fields: [operatingModelValueChainId], references: [id], onDelete: Cascade)

  @@map("operating_model_value_chain_metrics")
}

model OperatingModelOrganisation {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  orgType          OrganisationType
  level            OrganisationLevel
  parentOrgId      String?
  manager          String?
  employeeCount    Int?
  budget           Decimal?
  costCenter       String?
  location         String?
  responsibilities String[]
  skills           String[]
  performance      Int? // percentage
  maturity         MaturityLevel
  status           OrganisationStatus
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  parentOrg      OperatingModelOrganisation? @relation("OrganisationHierarchy", fields: [parentOrgId], references: [id])
  childOrgs      OperatingModelOrganisation[] @relation("OrganisationHierarchy")
  
  // BMC Integration - link to Resources and Activities
  businessCanvasResourceIds String[] // Array of Resource IDs
  businessCanvasActivityIds String[] // Array of Activity IDs

  @@map("operating_model_organisations")
}

model OperatingModelInformation {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  infoType         InformationType
  category         String
  source           String
  format           String
  frequency        InformationFrequency
  quality          Int? // percentage
  accessibility    InformationAccessibility
  security         InformationSecurity
  retention        Int? // days
  cost             Decimal?
  owner            String?
  users             String[] // Array of user roles
  systems           String[] // Array of system names
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  
  // BMC Integration - link to Resources and Activities
  businessCanvasResourceIds String[] // Array of Resource IDs
  businessCanvasActivityIds String[] // Array of Activity IDs

  @@map("operating_model_information")
}

model OperatingModelManagementSystem {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  systemType       ManagementSystemType
  category         String
  vendor            String?
  version           String?
  status            ManagementSystemStatus
  implementation    ImplementationStatus
  cost              Decimal?
  roi               Decimal?
  users             Int?
  performance       Int? // percentage
  reliability       Int? // percentage
  security          ManagementSystemSecurity
  compliance        ComplianceStatus
  integration       String[] // Array of integrated systems
  features          String[] // Array of key features
  risks             String[] // Array of risk descriptions
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  
  // BMC Integration - link to Resources and Activities
  businessCanvasResourceIds String[] // Array of Resource IDs
  businessCanvasActivityIds String[] // Array of Activity IDs

  @@map("operating_model_management_systems")
}

// ============================================================================
// ENUMS FOR OPERATING MODEL COMPONENTS
// ============================================================================

enum SupplierType {
  MATERIAL_SUPPLIER
  SERVICE_PROVIDER
  TECHNOLOGY_PARTNER
  LOGISTICS_PROVIDER
  CONSULTANT
  EQUIPMENT_SUPPLIER
  FINANCIAL_PARTNER
  REGULATORY_PARTNER
}

enum SupplierCriticality {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum SupplierPerformance {
  EXCELLENT
  GOOD
  AVERAGE
  POOR
  UNACCEPTABLE
}

enum ContractType {
  LONG_TERM
  MEDIUM_TERM
  SHORT_TERM
  PROJECT_BASED
  ON_DEMAND
  FRAMEWORK
}

enum LocationType {
  HEADQUARTERS
  PRODUCTION_FACILITY
  WAREHOUSE
  DISTRIBUTION_CENTER
  OFFICE
  LABORATORY
  WORKSHOP
  FIELD_OFFICE
  REMOTE_SITE
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  PLANNED
  UNDER_CONSTRUCTION
  DECOMMISSIONED
}

enum LocationCriticality {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum ValueChainType {
  PRIMARY
  SUPPORT
  ENABLING
  CUSTOMER_FACING
  INTERNAL
}

enum ValueChainComplexity {
  SIMPLE
  MODERATE
  COMPLEX
  VERY_COMPLEX
}

enum ValueChainStatus {
  ACTIVE
  INACTIVE
  PLANNED
  UNDER_DEVELOPMENT
  OPTIMIZING
}

enum ValueChainActivityType {
  PRIMARY
  SUPPORT
  ENABLING
  DECISION
  CONTROL
}

enum ValueChainInputType {
  MATERIAL
  INFORMATION
  CAPITAL
  HUMAN
  ENERGY
  TECHNOLOGY
}

enum ValueChainOutputType {
  PRODUCT
  SERVICE
  INFORMATION
  VALUE
  WASTE
}

enum ValueChainMetricType {
  EFFICIENCY
  EFFECTIVENESS
  QUALITY
  COST
  TIME
  SATISFACTION
}

enum MetricFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum MetricTrend {
  IMPROVING
  STABLE
  DECLINING
  VOLATILE
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrganisationType {
  FUNCTIONAL
  DIVISIONAL
  MATRIX
  NETWORK
  TEAM_BASED
  PROJECT_BASED
}

enum OrganisationLevel {
  EXECUTIVE
  SENIOR_MANAGEMENT
  MIDDLE_MANAGEMENT
  SUPERVISORY
  OPERATIONAL
}

enum OrganisationStatus {
  ACTIVE
  INACTIVE
  PLANNED
  RESTRUCTURING
}

enum InformationType {
  OPERATIONAL
  STRATEGIC
  TACTICAL
  FINANCIAL
  TECHNICAL
  REGULATORY
  CUSTOMER
  SUPPLIER
}

enum InformationFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ON_DEMAND
}

enum InformationAccessibility {
  PUBLIC
  INTERNAL
  RESTRICTED
  CONFIDENTIAL
  CLASSIFIED
}

enum InformationSecurity {
  BASIC
  STANDARD
  ENHANCED
  HIGH
  MAXIMUM
}

enum ManagementSystemType {
  ERP
  CRM
  SCM
  HRM
  FINANCE
  QUALITY
  SAFETY
  ENVIRONMENTAL
  ASSET
  PROJECT
  ANALYTICS
  COLLABORATION
}

enum ManagementSystemStatus {
  ACTIVE
  INACTIVE
  PLANNED
  UNDER_IMPLEMENTATION
  UPGRADING
  DECOMMISSIONING
}

enum ImplementationStatus {
  NOT_STARTED
  PLANNING
  IN_PROGRESS
  TESTING
  LIVE
  OPTIMIZING
}

enum ManagementSystemSecurity {
  BASIC
  STANDARD
  ENHANCED
  HIGH
  MAXIMUM
}

// Additional enums needed for the new OMC framework
enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// LEGACY OPERATING MODEL COMPONENTS (TO BE DEPRECATED)
// ============================================================================

// These models are kept for backward compatibility but will be deprecated
// in favor of the new Campbell, Lancelott, Gutierrez framework

model ValueChain {
  id               String   @id @default(cuid())
  operatingModelId String
  name             String
  description      String?
  sequence         Int
  activityType     String? // PRIMARY, SUPPORT, ENABLING
  duration         Int? // minutes
  resources        String[] // Array of resource IDs or names
  dependencies     String[] // Array of activity IDs
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  activities     ValueChainActivity[]
  inputs         ValueChainInput[]
  outputs        ValueChainOutput[]
  metrics        ValueChainMetric[]

  @@map("value_chains")
}

model ValueChainActivity {
  id               String   @id @default(cuid())
  valueChainId     String
  name             String
  description      String?
  activityType     String // PRIMARY, SUPPORT, ENABLING
  sequence         Int
  duration         Int // minutes
  resources        String[] // Array of resource IDs
  dependencies     String[] // Array of activity IDs
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  valueChain ValueChain @relation(fields: [valueChainId], references: [id], onDelete: Cascade)

  @@map("value_chain_activities")
}

model ValueChainInput {
  id               String   @id @default(cuid())
  valueChainId     String
  name             String
  description      String?
  inputType        String // MATERIAL, INFORMATION, CAPITAL, HUMAN
  source           String
  quantity         String
  quality          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  valueChain ValueChain @relation(fields: [valueChainId], references: [id], onDelete: Cascade)

  @@map("value_chain_inputs")
}

model ValueChainOutput {
  id               String   @id @default(cuid())
  valueChainId     String
  name             String
  description      String?
  outputType       String // PRODUCT, SERVICE, INFORMATION, VALUE
  customer         String
  quantity         String
  quality          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  valueChain ValueChain @relation(fields: [valueChainId], references: [id], onDelete: Cascade)

  @@map("value_chain_outputs")
}

model ValueChainMetric {
  id               String   @id @default(cuid())
  valueChainId     String
  name             String
  description      String?
  metricType       String // EFFICIENCY, EFFECTIVENESS, QUALITY, COST
  unit             String
  target           Float
  current          Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  valueChain ValueChain @relation(fields: [valueChainId], references: [id], onDelete: Cascade)

  @@map("value_chain_metrics")
}

// ============================================================================
// CRITICAL CONTROL THEORY (CCT) LAYER
// ============================================================================

model CriticalControl {
  id                    String           @id @default(cuid())
  name                  String
  description           String?
  controlCategory       ControlCategory  @default(SUPPORTING)
  isCritical            Boolean          @default(false)
  verificationFrequency String? // e.g., "Daily", "Weekly", "Monthly"
  riskCategoryId        String?
  controlTypeId         String?
  effectivenessId       String?
  complianceStatus      ComplianceStatus @default(COMPLIANT)
  priority              Priority         @default(MEDIUM)
  createdById           String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relationships
  createdBy        User                  @relation("ControlCreator", fields: [createdById], references: [id])
  riskCategory     RiskCategory?         @relation(fields: [riskCategoryId], references: [id])
  controlType      ControlType?          @relation(fields: [controlTypeId], references: [id])
  effectiveness    ControlEffectiveness? @relation(fields: [effectivenessId], references: [id])
  processes        ProcessControl[]
  assets           AssetControl[]
  verificationLogs VerificationLog[]
  bowtieModels     BowtieModel[]

  @@map("critical_controls")
}

model RiskCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls CriticalControl[]

  @@map("risk_categories")
}

model ControlType {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls CriticalControl[]

  @@map("control_types")
}

model ControlEffectiveness {
  id          String   @id @default(cuid())
  rating      String // "Effective", "Needs Attention", "Critical"
  description String?
  score       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls CriticalControl[]

  @@map("control_effectiveness")
}

model VerificationLog {
  id          String             @id @default(cuid())
  controlId   String
  status      VerificationStatus
  submittedBy String
  submittedAt DateTime           @default(now())
  notes       String?
  evidence    String? // URL or reference to evidence

  // Relationships
  control CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)
  user    User            @relation("VerificationUser", fields: [submittedBy], references: [id])

  @@map("verification_logs")
}

// Bowtie Analysis
model BowtieModel {
  id           String       @id @default(cuid())
  name         String
  description  String?
  topEventId   String?
  linkedRiskId String?
  capabilityId String?
  createdBy    String
  status       BowtieStatus @default(DRAFT)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  enterprise         Enterprise?         @relation(fields: [enterpriseId], references: [id])
  enterpriseId       String?
  topEvent           TopEvent?           @relation(fields: [topEventId], references: [id])
  threats            Threat[]
  consequences       Consequence[]
  preventiveControls PreventiveControl[]
  mitigatingControls MitigatingControl[]
  bowtieNodes        BowtieNode[]
  controls           CriticalControl[]

  @@map("bowtie_models")
}

model TopEvent {
  id          String         @id @default(cuid())
  title       String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  bowtieModels BowtieModel[]

  @@map("top_events")
}

model Threat {
  id            String   @id @default(cuid())
  bowtieModelId String
  title         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  bowtieModel        BowtieModel         @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  preventiveControls PreventiveControl[]

  @@map("threats")
}

model Consequence {
  id             String   @id @default(cuid())
  bowtieModelId  String
  title          String
  linkedBmcBlock String? // Links to BMC elements
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  bowtieModel        BowtieModel         @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  mitigatingControls MitigatingControl[]

  @@map("consequences")
}

model PreventiveControl {
  id                 String             @id @default(cuid())
  bowtieModelId      String
  title              String
  description        String?
  type               ControlCategory    @default(SUPPORTING)
  linkedProcessId    String?
  linkedPlaybookId   String?
  linkedCapabilityId String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  verificationDate   DateTime?
  threatId           String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relationships
  bowtieModel BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  threat      Threat?     @relation(fields: [threatId], references: [id])

  @@map("preventive_controls")
}

model MitigatingControl {
  id                 String             @id @default(cuid())
  bowtieModelId      String
  title              String
  description        String?
  type               ControlCategory    @default(SUPPORTING)
  linkedProcessId    String?
  linkedPlaybookId   String?
  linkedCapabilityId String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  verificationDate   DateTime?
  consequenceId      String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relationships
  bowtieModel BowtieModel  @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  consequence Consequence? @relation(fields: [consequenceId], references: [id])

  @@map("mitigating_controls")
}

model BowtieNode {
  id            String           @id @default(cuid())
  bowtieModelId String
  type          BowtieNodeType
  refId         String // Links to actual data entity
  x             Int // Position on canvas
  y             Int // Position on canvas
  status        BowtieNodeStatus @default(LIVE)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relationships
  bowtieModel BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)

  @@map("bowtie_nodes")
}

// ============================================================================
// RISK PROPAGATION ENGINE
// ============================================================================

model RiskSignal {
  id          String       @id @default(cuid())
  sourceType  String // "control", "process", "asset", "verification"
  sourceId    String
  severity    RiskSeverity
  description String
  detectedAt  DateTime     @default(now())
  location    String?
  isResolved  Boolean      @default(false)
  resolvedAt  DateTime?

  // Relationships
  riskPropagations RiskPropagation[] @relation("SignalSource")
  riskAlerts       RiskAlert[]

  @@map("risk_signals")
}

model RiskPropagation {
  id               String   @id @default(cuid())
  sourceEntityId   String
  targetEntityId   String
  propagationScore Float
  propagationPath  String? // JSON path of propagation
  calculatedAt     DateTime @default(now())

  // Relationships
  riskSignal    RiskSignal     @relation("SignalSource", fields: [sourceEntityId], references: [id])
  riskThreshold RiskThreshold? @relation(fields: [thresholdId], references: [id])
  thresholdId   String?

  @@map("risk_propagations")
}

model RiskThreshold {
  id             String   @id @default(cuid())
  entityType     String // "control", "process", "capability", "strategic"
  thresholdType  String // "failure_rate", "effectiveness", "maturity"
  thresholdValue Float
  alertMessage   String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  riskPropagations RiskPropagation[]
  riskAlerts       RiskAlert[]

  @@map("risk_thresholds")
}

model RiskAlert {
  id              String      @id @default(cuid())
  riskSignalId    String
  thresholdId     String?
  status          AlertStatus @default(ACTIVE)
  assignedTo      String?
  createdAt       DateTime    @default(now())
  resolvedAt      DateTime?
  resolutionNotes String?

  // Relationships
  riskSignal RiskSignal     @relation(fields: [riskSignalId], references: [id])
  threshold  RiskThreshold? @relation(fields: [thresholdId], references: [id])
  assignee   User?          @relation("AlertAssignee", fields: [assignedTo], references: [id])

  @@map("risk_alerts")
}

model RiskInsight {
  id          String   @id @default(cuid())
  entityId    String
  entityType  String // "process", "capability", "strategic"
  riskScore   Float
  insightType String // "trend", "threshold", "anomaly"
  narrative   String
  generatedAt DateTime @default(now())

  @@map("risk_insights")
}

// ============================================================================
// OPERATIONAL LAYER
// ============================================================================

model Process {
  id          String        @id @default(cuid())
  name        String
  description String?
  version     String        @default("1.0")
  status      ProcessStatus @default(DRAFT)
  priority    Priority      @default(MEDIUM)
  createdById String

  // Enterprise relationships
  enterpriseId   String?
  facilityId     String?
  businessUnitId String?
  departmentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Graph-Relational fields
  hierarchyPath String? // LTREE path for hierarchical queries
  graphNodeId   String? // Reference to graph node

  // Relationships
  createdBy      User                   @relation("ProcessCreator", fields: [createdById], references: [id])
  enterprise     Enterprise?            @relation(fields: [enterpriseId], references: [id])
  facility       Facility?              @relation(fields: [facilityId], references: [id])
  businessUnit   BusinessUnit?          @relation(fields: [businessUnitId], references: [id])
  department     Department?            @relation(fields: [departmentId], references: [id])
  steps          ProcessStep[]
  inputs         ProcessInput[]
  outputs        ProcessOutput[]
  metrics        ProcessMetric[]
  risks          ProcessRisk[]
  controls       ProcessControl[]
  playbooks      ProcessPlaybook[]
  maturityScores ProcessMaturityScore[]
  graphNode      Node?                 @relation(fields: [graphNodeId], references: [id])

  @@map("processes")
}

model ProcessStep {
  id          String   @id @default(cuid())
  processId   String
  name        String
  description String?
  orderIndex  Int
  duration    Int? // in minutes
  responsible String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_steps")
}

model ProcessInput {
  id          String   @id @default(cuid())
  processId   String
  name        String
  type        String?
  description String?
  required    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_inputs")
}

model ProcessOutput {
  id          String   @id @default(cuid())
  processId   String
  name        String
  type        String?
  description String?
  quality     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_outputs")
}

model ProcessMetric {
  id        String   @id @default(cuid())
  processId String
  name      String
  value     Float
  unit      String?
  target    Float?
  frequency String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_metrics")
}

model ProcessRisk {
  id          String         @id @default(cuid())
  processId   String
  name        String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  impact      RiskImpact     @default(MEDIUM)
  mitigation  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_risks")
}

// Playbook Management
model Playbook {
  id          String         @id @default(cuid())
  name        String
  description String?
  version     String         @default("1.0")
  status      PlaybookStatus @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  procedures        Procedure[]
  trainingMaterials TrainingMaterial[]
  bestPractices     BestPractice[]
  improvements      Improvement[]
  processes         ProcessPlaybook[]

  @@map("playbooks")
}

model Procedure {
  id          String   @id @default(cuid())
  playbookId  String
  name        String
  description String?
  steps       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("procedures")
}

model TrainingMaterial {
  id         String   @id @default(cuid())
  playbookId String
  title      String
  type       String?
  content    String?
  url        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  playbook Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("training_materials")
}

model BestPractice {
  id          String   @id @default(cuid())
  playbookId  String
  name        String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("best_practices")
}

model Improvement {
  id          String            @id @default(cuid())
  playbookId  String
  name        String
  description String?
  status      ImprovementStatus @default(PROPOSED)
  priority    Priority          @default(MEDIUM)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  playbook Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("improvements")
}

// Maturity Assessment
model MaturityAssessment {
  id          String   @id @default(cuid())
  name        String
  description String?
  framework   String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdBy           User                 @relation("AssessmentCreator", fields: [createdById], references: [id])
  capabilityScores    CapabilityScore[]
  improvementRoadmaps ImprovementRoadmap[]
  benchmarks          Benchmark[]
  progress            Progress[]

  @@map("maturity_assessments")
}

model CapabilityScore {
  id                   String   @id @default(cuid())
  maturityAssessmentId String
  capability           String
  score                Int
  maxScore             Int      @default(5)
  description          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  maturityAssessment MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("capability_scores")
}

model ImprovementRoadmap {
  id                   String        @id @default(cuid())
  maturityAssessmentId String
  name                 String
  description          String?
  priority             Priority      @default(MEDIUM)
  targetDate           DateTime?
  status               RoadmapStatus @default(PLANNED)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  maturityAssessment MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("improvement_roadmaps")
}

model Benchmark {
  id                   String   @id @default(cuid())
  maturityAssessmentId String
  metric               String
  value                Float
  industry             String?
  description          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  maturityAssessment MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("benchmarks")
}

model Progress {
  id                   String         @id @default(cuid())
  maturityAssessmentId String
  milestone            String
  status               ProgressStatus @default(IN_PROGRESS)
  completion           Float          @default(0) // percentage
  notes                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  // Relationships
  maturityAssessment MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("progress")
}

// Asset Management
model Asset {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        AssetType
  location    String?
  status      AssetStatus      @default(OPERATIONAL)
  criticality AssetCriticality @default(MEDIUM)
  createdById String

  // Enterprise relationships
  enterpriseId   String?
  facilityId     String?
  businessUnitId String?
  departmentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  createdBy     User                @relation("AssetCreator", fields: [createdById], references: [id])
  enterprise    Enterprise?         @relation(fields: [enterpriseId], references: [id])
  facility      Facility?           @relation(fields: [facilityId], references: [id])
  businessUnit  BusinessUnit?       @relation(fields: [businessUnitId], references: [id])
  department    Department?         @relation(fields: [departmentId], references: [id])
  controls      AssetControl[]
  risks         AssetRisk[]
  protections   AssetProtection[]
  monitors      AssetMonitor[]
  optimisations AssetOptimisation[]

  @@map("assets")
}

model AssetRisk {
  id          String         @id @default(cuid())
  assetId     String
  name        String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  mitigation  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_risks")
}

model AssetProtection {
  id            String   @id @default(cuid())
  assetId       String
  name          String
  measure       String?
  type          String?
  effectiveness String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_protections")
}

model AssetMonitor {
  id        String        @id @default(cuid())
  assetId   String
  name      String
  type      String?
  status    MonitorStatus @default(ACTIVE)
  frequency String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relationships
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_monitors")
}

model AssetOptimisation {
  id          String             @id @default(cuid())
  assetId     String
  name        String
  opportunity String?
  benefit     String?
  cost        Float?
  priority    Priority           @default(MEDIUM)
  status      OptimisationStatus @default(PROPOSED)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relationships
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_optimisations")
}

// ============================================================================
// CROSS-ENTITY RELATIONSHIPS
// ============================================================================

model ProcessControl {
  processId String
  controlId String

  // Relationships
  process Process         @relation(fields: [processId], references: [id], onDelete: Cascade)
  control CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@id([processId, controlId])
  @@map("process_controls")
}

model AssetControl {
  assetId   String
  controlId String

  // Relationships
  asset   Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  control CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@id([assetId, controlId])
  @@map("asset_controls")
}

model ProcessPlaybook {
  processId  String
  playbookId String

  // Relationships
  process  Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  playbook Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@id([processId, playbookId])
  @@map("process_playbooks")
}

model ProcessMaturityScore {
  processId  String
  capability String
  score      Int
  maxScore   Int      @default(5)
  assessedAt DateTime @default(now())

  // Relationships
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@id([processId, capability])
  @@map("process_maturity_scores")
}

// ============================================================================
// AUDIT & TRACEABILITY
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  timestamp DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProcessStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

enum PlaybookStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

enum ImprovementStatus {
  PROPOSED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RoadmapStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
  UNDER_REVIEW
}

enum ControlCategory {
  CRITICAL
  SUPPORTING
  DETECTIVE
  PREVENTIVE
  CORRECTIVE
}

enum VerificationStatus {
  VERIFIED
  FAILED
  UNVERIFIED
  PENDING
}

enum BowtieStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BowtieNodeType {
  THREAT
  CONTROL
  EVENT
  CONSEQUENCE
}

enum BowtieNodeStatus {
  LIVE
  INACTIVE
  FAILED
  NOT_LINKED
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  ESCALATED
  IGNORED
}

enum AssetType {
  EQUIPMENT
  FACILITY
  SYSTEM
  PROCESS
  PERSONNEL
  INFORMATION
}

enum AssetStatus {
  OPERATIONAL
  MAINTENANCE
  OFFLINE
  RETIRED
}

enum AssetCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MonitorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAILED
}

enum OptimisationStatus {
  PROPOSED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ResourceType {
  HUMAN
  FINANCIAL
  PHYSICAL
  INTELLECTUAL
  DIGITAL
}

enum MaturityLevel {
  INITIAL
  REPEATABLE
  DEFINED
  MANAGED
  OPTIMISING
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskLikelihood {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RiskImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Enums for enhanced BMC functionality
enum CanvasStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum EditMode {
  SINGLE_USER
  MULTI_USER
  READ_ONLY
}

enum CollaboratorRole {
  OWNER
  EDITOR
  REVIEWER
  VIEWER
}

enum SharingType {
  PUBLIC_LINK
  EMAIL_INVITE
  TEAM_ACCESS
  ENTERPRISE_ACCESS
}

enum ExportFormat {
  PDF
  PNG
  SVG
  JSON
  CSV
  EXCEL
}

enum TemplateCategory {
  INDUSTRY
  BUSINESS_TYPE
  CUSTOM
  ENTERPRISE
}

// ============================================================================
// CANVAS METADATA ENHANCEMENT ENUMS
// ============================================================================

enum RiskProfile {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BusinessType {
  CORPORATION
  PARTNERSHIP
  SOLE_TRADER
  TRUST
  JOINT_VENTURE
  SUBSIDIARY
}

enum RegionalClassification {
  METROPOLITAN
  REGIONAL
  REMOTE
  RURAL
  COASTAL
  INLAND
}

// Business Canvas Framework Associations
model BusinessCanvasOperationalStreams {
  id                  String   @id @default(cuid())
  businessCanvasId    String
  operationalStreamId String
  isAutoApplied       Boolean  @default(true) // Whether this was auto-applied or manually added
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  businessCanvas               BusinessCanvas              @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  operationalStream            OperationalStream           @relation(fields: [operationalStreamId], references: [id], onDelete: Cascade)
  IndustryOperationalStreams   IndustryOperationalStreams? @relation(fields: [industryOperationalStreamsId], references: [id])
  industryOperationalStreamsId String?

  @@unique([businessCanvasId, operationalStreamId])
  @@map("business_canvas_operational_streams")
}

model BusinessCanvasComplianceFrameworks {
  id                    String   @id @default(cuid())
  businessCanvasId      String
  complianceFrameworkId String
  isAutoApplied         Boolean  @default(true) // Whether this was auto-applied or manually added
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  businessCanvas                BusinessCanvas               @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  complianceFramework           ComplianceRequirement        @relation(fields: [complianceFrameworkId], references: [id], onDelete: Cascade)
  RegulatoryFramework           RegulatoryFramework?         @relation(fields: [regulatoryFrameworkId], references: [id])
  regulatoryFrameworkId         String?
  IndustryComplianceFramework   IndustryComplianceFramework? @relation(fields: [industryComplianceFrameworkId], references: [id])
  industryComplianceFrameworkId String?

  @@unique([businessCanvasId, complianceFrameworkId])
  @@map("business_canvas_compliance_frameworks")
}

model BusinessCanvasFacilityTypes {
  id               String   @id @default(cuid())
  businessCanvasId String
  facilityTypeId   String
  isAutoApplied    Boolean  @default(true) // Whether this was auto-applied or manually added
  assignmentConfidence Decimal? @db.Decimal(3,2) // Confidence score for auto-assignment
  assignmentMethod String?  // 'manual', 'auto', 'pattern'
  patternId        String?  // Reference to the pattern that assigned this
  rejectedAt       DateTime? // When this was rejected by user
  rejectionReason  String?  // Reason for rejection
  canReapply       Boolean  @default(true) // Whether this can be reapplied
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  businessCanvas          BusinessCanvas         @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)
  facilityType            FacilityTypeMaster     @relation(fields: [facilityTypeId], references: [id], onDelete: Cascade)
  IndustryFacilityTypes   IndustryFacilityTypes? @relation(fields: [industryFacilityTypesId], references: [id])
  industryFacilityTypesId String?
  pattern                 AssignmentPattern?     @relation(fields: [patternId], references: [id])

  @@unique([businessCanvasId, facilityTypeId])
  @@map("business_canvas_facility_types")
}

// ============================================================================
// PATTERN-BASED ASSIGNMENT SYSTEM
// ============================================================================

model AssignmentPattern {
  id                String   @id @default(cuid())
  patternType       String   // 'facility', 'operational', 'compliance', 'regulatory'
  industryCode      String
  sectorCodes       String[] // Array of sector codes
  locationPatterns  Json?    // Location-based patterns (state, region, jurisdiction)
  assignmentData    Json     // The actual assignments (facility types, streams, etc.)
  confidenceScore   Decimal  @db.Decimal(3,2) @default(0.8)
  usageCount        Int      @default(0)
  successRate       Decimal  @db.Decimal(3,2) @default(0.8)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  businessCanvasFacilityTypes BusinessCanvasFacilityTypes[]
  patternApplications         PatternApplication[]

  @@index([industryCode, sectorCodes])
  @@index([patternType, confidenceScore])
  @@map("assignment_patterns")
}

model PatternApplication {
  id                    String   @id @default(cuid())
  canvasId              String
  patternId             String
  appliedAssignments    Json     // What was actually applied
  userAcceptanceRate    Decimal  @db.Decimal(3,2) @default(1.0) // How often user accepts vs rejects
  appliedAt             DateTime @default(now())

  // Relationships
  businessCanvas BusinessCanvas    @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  pattern        AssignmentPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)

  @@index([canvasId])
  @@index([patternId])
  @@map("pattern_applications")
}

// ============================================================================
// OPERATING MODEL VERSION CONTROL AND COLLABORATION
// ============================================================================

model OperatingModelVersion {
  id                String   @id @default(cuid())
  operatingModelId  String
  versionNumber     String
  description       String?
  changes           Json? // JSON object describing changes
  createdBy         String
  createdAt         DateTime @default(now())

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  creator         User           @relation("OperatingModelVersionCreator", fields: [createdBy], references: [id])

  @@map("operating_model_versions")
}

model OperatingModelCollaborator {
  id                String   @id @default(cuid())
  operatingModelId  String
  userId            String
  role              CollaboratorRole @default(VIEWER)
  permissions       Json? // JSON object with specific permissions
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  user            User           @relation("OperatingModelCollaboratorCreator", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([operatingModelId, userId])
  @@map("operating_model_collaborators")
}

model OperatingModelSharingSetting {
  id                String      @id @default(cuid())
  operatingModelId  String
  sharingType       SharingType @default(TEAM_ACCESS)
  allowedUsers      String[] // Array of user IDs
  allowedRoles      String[] // Array of role names
  expiresAt         DateTime?
  createdBy         String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  creator         User           @relation("OperatingModelSharingSettingCreator", fields: [createdBy], references: [id])

  @@map("operating_model_sharing_settings")
}

model OperatingModelExport {
  id                String       @id @default(cuid())
  operatingModelId  String
  exportFormat      ExportFormat @default(JSON)
  exportData        Json // The exported data
  exportedBy        String
  createdAt         DateTime     @default(now())

  // Relationships
  operatingModel OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)
  creator         User           @relation("OperatingModelExportCreator", fields: [exportedBy], references: [id])

  @@map("operating_model_exports")
}

model OperatingModelTemplate {
  id                String   @id @default(cuid())
  name              String
  description       String?
  category          String
  templateData      Json // The template structure
  isActive          Boolean  @default(true)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  sourceOperatingModels OperatingModel[] @relation("TemplateSource")
  creator               User             @relation("OperatingModelTemplateCreator", fields: [createdBy], references: [id])

  @@map("operating_model_templates")
}
