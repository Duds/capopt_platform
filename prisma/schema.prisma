// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Enterprise relationships
  enterpriseId String?
  departmentId String?

  // Relationships
  enterprise   Enterprise? @relation("EnterpriseUsers", fields: [enterpriseId], references: [id])
  department   Department? @relation("DepartmentUsers", fields: [departmentId], references: [id])
  createdProcesses    Process[]    @relation("ProcessCreator")
  createdControls     CriticalControl[] @relation("ControlCreator")
  createdAssets       Asset[]      @relation("AssetCreator")
  maturityAssessments MaturityAssessment[] @relation("AssessmentCreator")
  auditLogs          AuditLog[]
  verificationLogs    VerificationLog[] @relation("VerificationUser")
  riskAlerts         RiskAlert[] @relation("AlertAssignee")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  AUDITOR
  SUPERADMIN
  SECURITY_OFFICER
  DATA_STEWARD
  PROCESS_OWNER
  CONTROL_OWNER
  VIEWER
  EXTERNAL_AUDITOR
  MAINTENANCE
  DOCUMENTATION_SPECIALIST
}

// ============================================================================
// ENTERPRISE INFORMATION SYSTEM
// ============================================================================

model Enterprise {
  id          String   @id @default(cuid())
  name        String
  legalName   String
  abn         String   @unique // Australian Business Number
  acn         String?  @unique // Australian Company Number
  description String?
  industry    String
  sector      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  addresses   EnterpriseAddress[]
  facilities  Facility[]
  businessUnits BusinessUnit[]
  users       User[]     @relation("EnterpriseUsers")
  processes   Process[]
  assets      Asset[]
  bowtieModels BowtieModel[]

  @@map("enterprises")
}

model EnterpriseAddress {
  id           String    @id @default(cuid())
  enterpriseId String
  type         AddressType
  street       String
  suburb       String
  city         String
  state        String
  postcode     String
  country      String    @default("Australia")
  isPrimary    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  @@map("enterprise_addresses")
}

model Facility {
  id           String    @id @default(cuid())
  enterpriseId String
  name         String
  code         String    @unique // Facility code (e.g., HL001)
  description  String?
  type         FacilityType
  status       FacilityStatus @default(ACTIVE)
  location     String?   // Geographic location
  coordinates  String?   // GPS coordinates
  capacity     String?   // Production capacity
  startDate    DateTime? // Operational start date
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  businessUnits BusinessUnit[]
  assets       Asset[]
  processes    Process[]

  @@map("facilities")
}

model BusinessUnit {
  id           String    @id @default(cuid())
  enterpriseId String
  facilityId   String?
  name         String
  code         String    @unique // Business unit code (e.g., MINING, PROCESSING)
  description  String?
  type         BusinessUnitType
  status       BusinessUnitStatus @default(ACTIVE)
  manager      String?   // Business unit manager name
  budget       Decimal?  // Annual budget
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  facility     Facility?  @relation(fields: [facilityId], references: [id])
  departments  Department[]
  assets       Asset[]
  processes    Process[]

  @@map("business_units")
}

model Department {
  id            String    @id @default(cuid())
  businessUnitId String
  name          String
  code          String    @unique // Department code (e.g., MINING_OP, PROCESSING_MAINT)
  description   String?
  type          DepartmentType
  status        DepartmentStatus @default(ACTIVE)
  manager       String?   // Department manager name
  employeeCount Int?      // Number of employees
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  businessUnit  BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  users         User[]     @relation("DepartmentUsers")
  assets        Asset[]
  processes     Process[]

  @@map("departments")
}

// Enums for Enterprise Information
enum AddressType {
  REGISTERED_OFFICE
  OPERATIONAL_OFFICE
  WAREHOUSE
  SITE_OFFICE
  MAILING_ADDRESS
}

enum FacilityType {
  MINE
  PROCESSING_PLANT
  REFINERY
  SMELTER
  WAREHOUSE
  OFFICE
  LABORATORY
  WORKSHOP
  POWER_STATION
  WATER_TREATMENT
  WASTE_MANAGEMENT
}

enum FacilityStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DECOMMISSIONED
  PLANNED
}

enum BusinessUnitType {
  MINING
  PROCESSING
  MAINTENANCE
  ENGINEERING
  SAFETY
  ENVIRONMENTAL
  FINANCE
  HUMAN_RESOURCES
  IT
  LOGISTICS
  QUALITY_ASSURANCE
  RESEARCH_DEVELOPMENT
}

enum BusinessUnitStatus {
  ACTIVE
  INACTIVE
  PLANNED
  DECOMMISSIONED
}

enum DepartmentType {
  OPERATIONS
  MAINTENANCE
  ENGINEERING
  SAFETY
  ENVIRONMENTAL
  FINANCE
  HUMAN_RESOURCES
  IT
  LOGISTICS
  QUALITY_ASSURANCE
  RESEARCH_DEVELOPMENT
  ADMINISTRATION
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  PLANNED
  DECOMMISSIONED
}

// ============================================================================
// STRATEGIC LAYER
// ============================================================================

model BusinessCanvas {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  valuePropositions ValueProposition[]
  customerSegments  CustomerSegment[]
  revenueStreams    RevenueStream[]
  partnerships      Partnership[]
  resources         Resource[]
  activities        Activity[]
  costStructures    CostStructure[]
  channels          Channel[]

  @@map("business_canvases")
}

model ValueProposition {
  id              String         @id @default(cuid())
  businessCanvasId String
  description     String
  priority        Priority       @default(MEDIUM)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("value_propositions")
}

model CustomerSegment {
  id              String         @id @default(cuid())
  businessCanvasId String
  name            String
  description     String?
  size            Int?
  priority        Priority       @default(MEDIUM)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("customer_segments")
}

model RevenueStream {
  id              String         @id @default(cuid())
  businessCanvasId String
  type            String
  description     String?
  estimatedValue  Float?
  frequency       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("revenue_streams")
}

model Partnership {
  id              String         @id @default(cuid())
  businessCanvasId String
  name            String
  type            String?
  description     String?
  value           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("partnerships")
}

model Resource {
  id              String         @id @default(cuid())
  businessCanvasId String
  name            String
  type            ResourceType
  description     String?
  availability    String?
  cost            Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Activity {
  id              String         @id @default(cuid())
  businessCanvasId String
  name            String
  description     String?
  priority        Priority       @default(MEDIUM)
  cost            Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model CostStructure {
  id              String         @id @default(cuid())
  businessCanvasId String
  description     String
  category        String?
  amount          Float?
  frequency       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("cost_structures")
}

model Channel {
  id              String         @id @default(cuid())
  businessCanvasId String
  type            String
  description     String?
  effectiveness   String?
  cost            Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  businessCanvas  BusinessCanvas @relation(fields: [businessCanvasId], references: [id], onDelete: Cascade)

  @@map("channels")
}

// Operating Model Canvas
model OperatingModel {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  valueChains     ValueChain[]
  serviceModels   ServiceModel[]
  experienceModels ExperienceModel[]
  capabilityModels CapabilityModel[]
  operatingPrinciples OperatingPrinciple[]

  @@map("operating_models")
}

model ValueChain {
  id              String        @id @default(cuid())
  operatingModelId String
  name            String
  description     String?
  sequence        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  operatingModel  OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)

  @@map("value_chains")
}

model ServiceModel {
  id              String        @id @default(cuid())
  operatingModelId String
  name            String
  description     String?
  type            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  operatingModel  OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)

  @@map("service_models")
}

model ExperienceModel {
  id              String        @id @default(cuid())
  operatingModelId String
  name            String
  description     String?
  touchpoints     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  operatingModel  OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)

  @@map("experience_models")
}

model CapabilityModel {
  id              String        @id @default(cuid())
  operatingModelId String
  name            String
  description     String?
  maturityLevel   MaturityLevel @default(INITIAL)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  operatingModel  OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)

  @@map("capability_models")
}

model OperatingPrinciple {
  id              String        @id @default(cuid())
  operatingModelId String
  name            String
  description     String?
  priority        Priority      @default(MEDIUM)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  operatingModel  OperatingModel @relation(fields: [operatingModelId], references: [id], onDelete: Cascade)

  @@map("operating_principles")
}

// ============================================================================
// CRITICAL CONTROL THEORY (CCT) LAYER
// ============================================================================

model CriticalControl {
  id              String   @id @default(cuid())
  name            String
  description     String?
  controlCategory ControlCategory @default(SUPPORTING)
  isCritical      Boolean  @default(false)
  verificationFrequency String? // e.g., "Daily", "Weekly", "Monthly"
  riskCategoryId  String?
  controlTypeId   String?
  effectivenessId String?
  complianceStatus ComplianceStatus @default(COMPLIANT)
  priority        Priority @default(MEDIUM)
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  createdBy       User                @relation("ControlCreator", fields: [createdById], references: [id])
  riskCategory    RiskCategory?       @relation(fields: [riskCategoryId], references: [id])
  controlType     ControlType?        @relation(fields: [controlTypeId], references: [id])
  effectiveness   ControlEffectiveness? @relation(fields: [effectivenessId], references: [id])
  processes       ProcessControl[]
  assets          AssetControl[]
  verificationLogs VerificationLog[]
  bowtieModels    BowtieModel[]

  @@map("critical_controls")
}

model RiskCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls    CriticalControl[]

  @@map("risk_categories")
}

model ControlType {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls    CriticalControl[]

  @@map("control_types")
}

model ControlEffectiveness {
  id          String   @id @default(cuid())
  rating      String   // "Effective", "Needs Attention", "Critical"
  description String?
  score       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  controls    CriticalControl[]

  @@map("control_effectiveness")
}

model VerificationLog {
  id          String   @id @default(cuid())
  controlId   String
  status      VerificationStatus
  submittedBy String
  submittedAt DateTime @default(now())
  notes       String?
  evidence    String? // URL or reference to evidence

  // Relationships
  control     CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)
  user        User            @relation("VerificationUser", fields: [submittedBy], references: [id])

  @@map("verification_logs")
}

// Bowtie Analysis
model BowtieModel {
  id          String   @id @default(cuid())
  name        String
  description String?
  topEventId  String?
  linkedRiskId String?
  capabilityId String?
  createdBy   String
  status      BowtieStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  enterprise  Enterprise? @relation(fields: [enterpriseId], references: [id])
  enterpriseId String?
  topEvent    TopEvent? @relation(fields: [topEventId], references: [id])
  threats     Threat[]
  consequences Consequence[]
  preventiveControls PreventiveControl[]
  mitigatingControls MitigatingControl[]
  bowtieNodes BowtieNode[]
  controls    CriticalControl[]

  @@map("bowtie_models")
}

model TopEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bowtieModels BowtieModel[]

  @@map("top_events")
}

model Threat {
  id              String   @id @default(cuid())
  bowtieModelId   String
  title           String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  bowtieModel     BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  preventiveControls PreventiveControl[]

  @@map("threats")
}

model Consequence {
  id              String   @id @default(cuid())
  bowtieModelId   String
  title           String
  linkedBmcBlock  String? // Links to BMC elements
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  bowtieModel     BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  mitigatingControls MitigatingControl[]

  @@map("consequences")
}

model PreventiveControl {
  id              String   @id @default(cuid())
  bowtieModelId   String
  title           String
  description     String?
  type            ControlCategory @default(SUPPORTING)
  linkedProcessId String?
  linkedPlaybookId String?
  linkedCapabilityId String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  verificationDate DateTime?
  threatId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  bowtieModel     BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  threat          Threat? @relation(fields: [threatId], references: [id])

  @@map("preventive_controls")
}

model MitigatingControl {
  id              String   @id @default(cuid())
  bowtieModelId   String
  title           String
  description     String?
  type            ControlCategory @default(SUPPORTING)
  linkedProcessId String?
  linkedPlaybookId String?
  linkedCapabilityId String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  verificationDate DateTime?
  consequenceId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  bowtieModel     BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)
  consequence     Consequence? @relation(fields: [consequenceId], references: [id])

  @@map("mitigating_controls")
}

model BowtieNode {
  id            String   @id @default(cuid())
  bowtieModelId String
  type          BowtieNodeType
  refId         String   // Links to actual data entity
  x             Int      // Position on canvas
  y             Int      // Position on canvas
  status        BowtieNodeStatus @default(LIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  bowtieModel   BowtieModel @relation(fields: [bowtieModelId], references: [id], onDelete: Cascade)

  @@map("bowtie_nodes")
}

// ============================================================================
// RISK PROPAGATION ENGINE
// ============================================================================

model RiskSignal {
  id          String   @id @default(cuid())
  sourceType  String   // "control", "process", "asset", "verification"
  sourceId    String
  severity    RiskSeverity
  description String
  detectedAt  DateTime @default(now())
  location    String?
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?

  // Relationships
  riskPropagations RiskPropagation[] @relation("SignalSource")
  riskAlerts       RiskAlert[]

  @@map("risk_signals")
}

model RiskPropagation {
  id              String   @id @default(cuid())
  sourceEntityId  String
  targetEntityId  String
  propagationScore Float
  propagationPath String? // JSON path of propagation
  calculatedAt    DateTime @default(now())

  // Relationships
  riskSignal      RiskSignal @relation("SignalSource", fields: [sourceEntityId], references: [id])
  riskThreshold   RiskThreshold? @relation(fields: [thresholdId], references: [id])
  thresholdId     String?

  @@map("risk_propagations")
}

model RiskThreshold {
  id            String   @id @default(cuid())
  entityType    String   // "control", "process", "capability", "strategic"
  thresholdType String   // "failure_rate", "effectiveness", "maturity"
  thresholdValue Float
  alertMessage  String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  riskPropagations RiskPropagation[]
  riskAlerts       RiskAlert[]

  @@map("risk_thresholds")
}

model RiskAlert {
  id            String   @id @default(cuid())
  riskSignalId  String
  thresholdId   String?
  status        AlertStatus @default(ACTIVE)
  assignedTo    String?
  createdAt     DateTime @default(now())
  resolvedAt    DateTime?
  resolutionNotes String?

  // Relationships
  riskSignal    RiskSignal @relation(fields: [riskSignalId], references: [id])
  threshold     RiskThreshold? @relation(fields: [thresholdId], references: [id])
  assignee      User? @relation("AlertAssignee", fields: [assignedTo], references: [id])

  @@map("risk_alerts")
}

model RiskInsight {
  id          String   @id @default(cuid())
  entityId    String
  entityType  String   // "process", "capability", "strategic"
  riskScore   Float
  insightType String   // "trend", "threshold", "anomaly"
  narrative   String
  generatedAt DateTime @default(now())

  @@map("risk_insights")
}

// ============================================================================
// OPERATIONAL LAYER
// ============================================================================

model Process {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0")
  status      ProcessStatus @default(DRAFT)
  priority    Priority @default(MEDIUM)
  createdById String
  
  // Enterprise relationships
  enterpriseId String?
  facilityId   String?
  businessUnitId String?
  departmentId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdBy       User           @relation("ProcessCreator", fields: [createdById], references: [id])
  enterprise      Enterprise?    @relation(fields: [enterpriseId], references: [id])
  facility        Facility?      @relation(fields: [facilityId], references: [id])
  businessUnit    BusinessUnit?  @relation(fields: [businessUnitId], references: [id])
  department      Department?    @relation(fields: [departmentId], references: [id])
  steps           ProcessStep[]
  inputs          ProcessInput[]
  outputs         ProcessOutput[]
  metrics         ProcessMetric[]
  risks           ProcessRisk[]
  controls        ProcessControl[]
  playbooks       ProcessPlaybook[]
  maturityScores  ProcessMaturityScore[]

  @@map("processes")
}

model ProcessStep {
  id          String   @id @default(cuid())
  processId   String
  name        String
  description String?
  orderIndex  Int
  duration    Int? // in minutes
  responsible String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_steps")
}

model ProcessInput {
  id          String   @id @default(cuid())
  processId   String
  name        String
  type        String?
  description String?
  required    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_inputs")
}

model ProcessOutput {
  id          String   @id @default(cuid())
  processId   String
  name        String
  type        String?
  description String?
  quality     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_outputs")
}

model ProcessMetric {
  id          String   @id @default(cuid())
  processId   String
  name        String
  value       Float
  unit        String?
  target      Float?
  frequency   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  process     Process  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_metrics")
}

model ProcessRisk {
  id          String      @id @default(cuid())
  processId   String
  name        String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  impact      RiskImpact     @default(MEDIUM)
  mitigation  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  process     Process     @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("process_risks")
}

// Playbook Management
model Playbook {
  id          String   @id @default(cuid())
  name        String
  description String?
  version     String   @default("1.0")
  status      PlaybookStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  procedures      Procedure[]
  trainingMaterials TrainingMaterial[]
  bestPractices   BestPractice[]
  improvements    Improvement[]
  processes       ProcessPlaybook[]

  @@map("playbooks")
}

model Procedure {
  id          String   @id @default(cuid())
  playbookId  String
  name        String
  description String?
  steps       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook    Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("procedures")
}

model TrainingMaterial {
  id          String   @id @default(cuid())
  playbookId  String
  title       String
  type        String?
  content     String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook    Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("training_materials")
}

model BestPractice {
  id          String   @id @default(cuid())
  playbookId  String
  name        String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook    Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("best_practices")
}

model Improvement {
  id          String   @id @default(cuid())
  playbookId  String
  name        String
  description String?
  status      ImprovementStatus @default(PROPOSED)
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  playbook    Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@map("improvements")
}

// Maturity Assessment
model MaturityAssessment {
  id          String   @id @default(cuid())
  name        String
  description String?
  framework   String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdBy       User                @relation("AssessmentCreator", fields: [createdById], references: [id])
  capabilityScores CapabilityScore[]
  improvementRoadmaps ImprovementRoadmap[]
  benchmarks     Benchmark[]
  progress       Progress[]

  @@map("maturity_assessments")
}

model CapabilityScore {
  id                  String   @id @default(cuid())
  maturityAssessmentId String
  capability          String
  score               Int
  maxScore            Int      @default(5)
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  maturityAssessment  MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("capability_scores")
}

model ImprovementRoadmap {
  id                  String   @id @default(cuid())
  maturityAssessmentId String
  name                String
  description         String?
  priority            Priority @default(MEDIUM)
  targetDate          DateTime?
  status              RoadmapStatus @default(PLANNED)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  maturityAssessment  MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("improvement_roadmaps")
}

model Benchmark {
  id                  String   @id @default(cuid())
  maturityAssessmentId String
  metric              String
  value               Float
  industry            String?
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  maturityAssessment  MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("benchmarks")
}

model Progress {
  id                  String   @id @default(cuid())
  maturityAssessmentId String
  milestone           String
  status              ProgressStatus @default(IN_PROGRESS)
  completion          Float    @default(0) // percentage
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  maturityAssessment  MaturityAssessment @relation(fields: [maturityAssessmentId], references: [id], onDelete: Cascade)

  @@map("progress")
}

// Asset Management
model Asset {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        AssetType
  location    String?
  status      AssetStatus @default(OPERATIONAL)
  criticality AssetCriticality @default(MEDIUM)
  createdById String
  
  // Enterprise relationships
  enterpriseId String?
  facilityId   String?
  businessUnitId String?
  departmentId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  createdBy       User          @relation("AssetCreator", fields: [createdById], references: [id])
  enterprise      Enterprise?   @relation(fields: [enterpriseId], references: [id])
  facility        Facility?     @relation(fields: [facilityId], references: [id])
  businessUnit    BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  department      Department?   @relation(fields: [departmentId], references: [id])
  controls        AssetControl[]
  risks           AssetRisk[]
  protections     AssetProtection[]
  monitors        AssetMonitor[]
  optimisations   AssetOptimisation[]

  @@map("assets")
}

model AssetRisk {
  id          String   @id @default(cuid())
  assetId     String
  name        String
  description String?
  severity    RiskSeverity
  likelihood  RiskLikelihood @default(MEDIUM)
  mitigation  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_risks")
}

model AssetProtection {
  id          String   @id @default(cuid())
  assetId     String
  name        String
  measure     String?
  type        String?
  effectiveness String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_protections")
}

model AssetMonitor {
  id          String   @id @default(cuid())
  assetId     String
  name        String
  type        String?
  status      MonitorStatus @default(ACTIVE)
  frequency   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_monitors")
}

model AssetOptimisation {
  id          String   @id @default(cuid())
  assetId     String
  name        String
  opportunity String?
  benefit     String?
  cost        Float?
  priority    Priority @default(MEDIUM)
  status      OptimisationStatus @default(PROPOSED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_optimisations")
}

// ============================================================================
// CROSS-ENTITY RELATIONSHIPS
// ============================================================================

model ProcessControl {
  processId String
  controlId String

  // Relationships
  process   Process        @relation(fields: [processId], references: [id], onDelete: Cascade)
  control   CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@id([processId, controlId])
  @@map("process_controls")
}

model AssetControl {
  assetId   String
  controlId String

  // Relationships
  asset     Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  control   CriticalControl @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@id([assetId, controlId])
  @@map("asset_controls")
}

model ProcessPlaybook {
  processId  String
  playbookId String

  // Relationships
  process    Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  playbook   Playbook @relation(fields: [playbookId], references: [id], onDelete: Cascade)

  @@id([processId, playbookId])
  @@map("process_playbooks")
}

model ProcessMaturityScore {
  processId String
  capability String
  score      Int
  maxScore   Int      @default(5)
  assessedAt DateTime @default(now())

  // Relationships
  process    Process  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@id([processId, capability])
  @@map("process_maturity_scores")
}

// ============================================================================
// AUDIT & TRACEABILITY
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  timestamp DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProcessStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

enum PlaybookStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

enum ImprovementStatus {
  PROPOSED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RoadmapStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
  UNDER_REVIEW
}

enum ControlCategory {
  CRITICAL
  SUPPORTING
  DETECTIVE
  PREVENTIVE
  CORRECTIVE
}

enum VerificationStatus {
  VERIFIED
  FAILED
  UNVERIFIED
  PENDING
}

enum BowtieStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BowtieNodeType {
  THREAT
  CONTROL
  EVENT
  CONSEQUENCE
}

enum BowtieNodeStatus {
  LIVE
  INACTIVE
  FAILED
  NOT_LINKED
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  ESCALATED
  IGNORED
}

enum AssetType {
  EQUIPMENT
  FACILITY
  SYSTEM
  PROCESS
  PERSONNEL
  INFORMATION
}

enum AssetStatus {
  OPERATIONAL
  MAINTENANCE
  OFFLINE
  RETIRED
}

enum AssetCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MonitorStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAILED
}

enum OptimisationStatus {
  PROPOSED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ResourceType {
  HUMAN
  FINANCIAL
  PHYSICAL
  INTELLECTUAL
  DIGITAL
}

enum MaturityLevel {
  INITIAL
  REPEATABLE
  DEFINED
  MANAGED
  OPTIMISING
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskLikelihood {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RiskImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
