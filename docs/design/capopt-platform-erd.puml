@startuml CapOpt Platform - Entity Relationship Diagram

!define RECTANGLE class

' Color scheme for different layers
!define STRATEGIC_COLOR #E3F2FD
!define OPERATIONAL_COLOR #F3E5F5
!define CONTROL_COLOR #FFF3E0
!define ENTERPRISE_COLOR #E8F5E8
!define AUDIT_COLOR #FFEBEE

' Strategic Layer
package "Strategic Layer" STRATEGIC_COLOR {
  entity "BusinessCanvas" as bc {
    * id: String (PK)
    --
    name: String
    description: String?
    version: String
    status: CanvasStatus
    editMode: EditMode
    --
    enterpriseId: String? (FK)
    facilityId: String? (FK)
    businessUnitId: String? (FK)
    parentCanvasId: String? (FK)
    --
    industry: String?
    sector: String?
    sectors: String[]
    primarySector: String?
    --
    strategicObjective: String?
    valueProposition: String?
    competitiveAdvantage: String?
    annualRevenue: Decimal?
    employeeCount: Int?
    --
    riskProfile: RiskProfile?
    complianceRequirements: String[]
    regulatoryFramework: String[]
  }

  entity "OperatingModel" as om {
    * id: String (PK)
    --
    name: String
    description: String?
    version: String
    isActive: Boolean
  }

  entity "ValueProposition" as vp {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    description: String
    priority: Priority
  }

  entity "CustomerSegment" as cs {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    name: String
    description: String?
    size: Int?
    priority: Priority
  }

  entity "RevenueStream" as rs {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    type: String
    description: String?
    estimatedValue: Float?
    frequency: String?
  }

  entity "Partnership" as p {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    name: String
    type: String?
    description: String?
    value: String?
  }

  entity "Resource" as r {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    name: String
    type: ResourceType
    description: String?
    availability: String?
    cost: Float?
  }

  entity "Activity" as a {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    name: String
    description: String?
    priority: Priority
    cost: Float?
  }

  entity "CostStructure" as cost {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    description: String
    category: String?
    amount: Float?
    frequency: String?
  }

  entity "Channel" as ch {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    type: String
    description: String?
    effectiveness: String?
    cost: Float?
  }

  entity "ValueChain" as vc {
    * id: String (PK)
    --
    operatingModelId: String (FK)
    name: String
    description: String?
    sequence: Int
  }

  entity "ServiceModel" as sm {
    * id: String (PK)
    --
    operatingModelId: String (FK)
    name: String
    description: String?
    type: String?
  }

  entity "ExperienceModel" as em {
    * id: String (PK)
    --
    operatingModelId: String (FK)
    name: String
    description: String?
    touchpoints: String?
  }

  entity "CapabilityModel" as cm {
    * id: String (PK)
    --
    operatingModelId: String (FK)
    name: String
    description: String?
    maturityLevel: MaturityLevel
  }

  entity "OperatingPrinciple" as op {
    * id: String (PK)
    --
    operatingModelId: String (FK)
    name: String
    description: String?
    priority: Priority
  }
}

' Enterprise Information System
package "Enterprise Information System" ENTERPRISE_COLOR {
  entity "Enterprise" as e {
    * id: String (PK)
    --
    name: String
    legalName: String
    abn: String (UK)
    acn: String? (UK)
    description: String?
    industry: String
    sector: String
    isActive: Boolean
  }

  entity "EnterpriseAddress" as ea {
    * id: String (PK)
    --
    enterpriseId: String (FK)
    type: AddressType
    street: String
    suburb: String
    city: String
    state: String
    postcode: String
    country: String
    isPrimary: Boolean
  }

  entity "Facility" as f {
    * id: String (PK)
    --
    enterpriseId: String (FK)
    name: String
    code: String (UK)
    description: String?
    type: FacilityType
    status: FacilityStatus
    location: String?
    coordinates: String?
    capacity: String?
    startDate: DateTime?
    isActive: Boolean
  }

  entity "BusinessUnit" as bu {
    * id: String (PK)
    --
    enterpriseId: String (FK)
    facilityId: String? (FK)
    name: String
    code: String (UK)
    description: String?
    type: BusinessUnitType
    status: BusinessUnitStatus
    manager: String?
    budget: Decimal?
    isActive: Boolean
  }

  entity "Department" as d {
    * id: String (PK)
    --
    businessUnitId: String (FK)
    name: String
    code: String (UK)
    description: String?
    type: DepartmentType
    status: DepartmentStatus
    manager: String?
    employeeCount: Int?
    isActive: Boolean
  }
}

' User Management
package "User Management" ENTERPRISE_COLOR {
  entity "User" as u {
    * id: String (PK)
    --
    email: String (UK)
    name: String
    password: String
    role: UserRole
    isActive: Boolean
    lastLogin: DateTime?
    --
    enterpriseId: String? (FK)
    departmentId: String? (FK)
  }
}

' Critical Control Theory Layer
package "Critical Control Theory (CCT) Layer" CONTROL_COLOR {
  entity "CriticalControl" as cc {
    * id: String (PK)
    --
    name: String
    description: String?
    controlCategory: ControlCategory
    isCritical: Boolean
    verificationFrequency: String?
    complianceStatus: ComplianceStatus
    priority: Priority
    createdById: String (FK)
    --
    riskCategoryId: String? (FK)
    controlTypeId: String? (FK)
    effectivenessId: String? (FK)
  }

  entity "RiskCategory" as rc {
    * id: String (PK)
    --
    name: String
    description: String?
    color: String?
  }

  entity "ControlType" as ct {
    * id: String (PK)
    --
    name: String
    description: String?
    category: String?
  }

  entity "ControlEffectiveness" as ce {
    * id: String (PK)
    --
    rating: String
    description: String?
    score: Int?
  }

  entity "VerificationLog" as vl {
    * id: String (PK)
    --
    controlId: String (FK)
    status: VerificationStatus
    submittedBy: String (FK)
    submittedAt: DateTime
    notes: String?
    evidence: String?
  }

  entity "BowtieModel" as bm {
    * id: String (PK)
    --
    name: String
    description: String?
    status: BowtieStatus
    createdBy: String
    --
    enterpriseId: String? (FK)
    topEventId: String? (FK)
    linkedRiskId: String?
    capabilityId: String?
  }

  entity "TopEvent" as te {
    * id: String (PK)
    --
    title: String
    description: String?
    severity: RiskSeverity
    likelihood: RiskLikelihood
  }

  entity "Threat" as t {
    * id: String (PK)
    --
    bowtieModelId: String (FK)
    title: String
    description: String?
  }

  entity "Consequence" as c {
    * id: String (PK)
    --
    bowtieModelId: String (FK)
    title: String
    linkedBmcBlock: String?
  }

  entity "PreventiveControl" as pc {
    * id: String (PK)
    --
    bowtieModelId: String (FK)
    title: String
    description: String?
    type: ControlCategory
    verificationStatus: VerificationStatus
    verificationDate: DateTime?
    --
    linkedProcessId: String?
    linkedPlaybookId: String?
    linkedCapabilityId: String?
    threatId: String? (FK)
  }

  entity "MitigatingControl" as mc {
    * id: String (PK)
    --
    bowtieModelId: String (FK)
    title: String
    description: String?
    type: ControlCategory
    verificationStatus: VerificationStatus
    verificationDate: DateTime?
    --
    linkedProcessId: String?
    linkedPlaybookId: String?
    linkedCapabilityId: String?
    consequenceId: String? (FK)
  }

  entity "BowtieNode" as bn {
    * id: String (PK)
    --
    bowtieModelId: String (FK)
    type: BowtieNodeType
    refId: String
    x: Int
    y: Int
    status: BowtieNodeStatus
  }
}

' Risk Propagation Engine
package "Risk Propagation Engine" CONTROL_COLOR {
  entity "RiskSignal" as rsig {
    * id: String (PK)
    --
    sourceType: String
    sourceId: String
    severity: RiskSeverity
    description: String
    detectedAt: DateTime
    location: String?
    isResolved: Boolean
    resolvedAt: DateTime?
  }

  entity "RiskPropagation" as rp {
    * id: String (PK)
    --
    sourceEntityId: String (FK)
    targetEntityId: String
    propagationScore: Float
    propagationPath: String?
    calculatedAt: DateTime
    --
    thresholdId: String? (FK)
  }

  entity "RiskThreshold" as rt {
    * id: String (PK)
    --
    entityType: String
    thresholdType: String
    thresholdValue: Float
    alertMessage: String
    isActive: Boolean
  }

  entity "RiskAlert" as ra {
    * id: String (PK)
    --
    riskSignalId: String (FK)
    thresholdId: String? (FK)
    status: AlertStatus
    assignedTo: String? (FK)
    createdAt: DateTime
    resolvedAt: DateTime?
    resolutionNotes: String?
  }

  entity "RiskInsight" as ri {
    * id: String (PK)
    --
    entityId: String
    entityType: String
    riskScore: Float
    insightType: String
    narrative: String
    generatedAt: DateTime
  }
}

' Operational Layer
package "Operational Layer" OPERATIONAL_COLOR {
  entity "Process" as proc {
    * id: String (PK)
    --
    name: String
    description: String?
    version: String
    status: ProcessStatus
    priority: Priority
    createdById: String (FK)
    --
    enterpriseId: String? (FK)
    facilityId: String? (FK)
    businessUnitId: String? (FK)
    departmentId: String? (FK)
  }

  entity "ProcessStep" as ps {
    * id: String (PK)
    --
    processId: String (FK)
    name: String
    description: String?
    orderIndex: Int
    duration: Int?
    responsible: String?
  }

  entity "ProcessInput" as pi {
    * id: String (PK)
    --
    processId: String (FK)
    name: String
    type: String?
    description: String?
    required: Boolean
  }

  entity "ProcessOutput" as po {
    * id: String (PK)
    --
    processId: String (FK)
    name: String
    type: String?
    description: String?
    quality: String?
  }

  entity "ProcessMetric" as pm {
    * id: String (PK)
    --
    processId: String (FK)
    name: String
    value: Float
    unit: String?
    target: Float?
    frequency: String?
  }

  entity "ProcessRisk" as pr {
    * id: String (PK)
    --
    processId: String (FK)
    name: String
    description: String?
    severity: RiskSeverity
    likelihood: RiskLikelihood
    impact: RiskImpact
    mitigation: String?
  }

  entity "Playbook" as pb {
    * id: String (PK)
    --
    name: String
    description: String?
    version: String
    status: PlaybookStatus
  }

  entity "Procedure" as proc2 {
    * id: String (PK)
    --
    playbookId: String (FK)
    name: String
    description: String?
    steps: String?
  }

  entity "TrainingMaterial" as tm {
    * id: String (PK)
    --
    playbookId: String (FK)
    title: String
    type: String?
    content: String?
    url: String?
  }

  entity "BestPractice" as bp {
    * id: String (PK)
    --
    playbookId: String (FK)
    name: String
    description: String?
    category: String?
  }

  entity "Improvement" as imp {
    * id: String (PK)
    --
    playbookId: String (FK)
    name: String
    description: String?
    status: ImprovementStatus
    priority: Priority
  }

  entity "Asset" as asset {
    * id: String (PK)
    --
    name: String
    description: String?
    type: AssetType
    location: String?
    status: AssetStatus
    criticality: AssetCriticality
    createdById: String (FK)
    --
    enterpriseId: String? (FK)
    facilityId: String? (FK)
    businessUnitId: String? (FK)
    departmentId: String? (FK)
  }

  entity "AssetRisk" as ar {
    * id: String (PK)
    --
    assetId: String (FK)
    name: String
    description: String?
    severity: RiskSeverity
    likelihood: RiskLikelihood
    mitigation: String?
  }

  entity "AssetProtection" as ap {
    * id: String (PK)
    --
    assetId: String (FK)
    name: String
    measure: String?
    type: String?
    effectiveness: String?
  }

  entity "AssetMonitor" as am {
    * id: String (PK)
    --
    assetId: String (FK)
    name: String
    type: String?
    status: MonitorStatus
    frequency: String?
  }

  entity "AssetOptimisation" as ao {
    * id: String (PK)
    --
    assetId: String (FK)
    name: String
    opportunity: String?
    benefit: String?
    cost: Float?
    priority: Priority
    status: OptimisationStatus
  }
}

' Maturity Assessment
package "Maturity Assessment" OPERATIONAL_COLOR {
  entity "MaturityAssessment" as ma {
    * id: String (PK)
    --
    name: String
    description: String?
    framework: String?
    createdById: String (FK)
  }

  entity "CapabilityScore" as caps {
    * id: String (PK)
    --
    maturityAssessmentId: String (FK)
    capability: String
    score: Int
    maxScore: Int
    description: String?
  }

  entity "ImprovementRoadmap" as ir {
    * id: String (PK)
    --
    maturityAssessmentId: String (FK)
    name: String
    description: String?
    priority: Priority
    targetDate: DateTime?
    status: RoadmapStatus
  }

  entity "Benchmark" as bench {
    * id: String (PK)
    --
    maturityAssessmentId: String (FK)
    metric: String
    value: Float
    industry: String?
    description: String?
  }

  entity "Progress" as prog {
    * id: String (PK)
    --
    maturityAssessmentId: String (FK)
    milestone: String
    status: ProgressStatus
    completion: Float
    notes: String?
  }
}

' Canvas Metadata Framework
package "Canvas Metadata Framework" STRATEGIC_COLOR {
  entity "Industry" as ind {
    * id: String (PK)
    --
    code: String (UK)
    name: String
    description: String?
    category: String?
    isActive: Boolean
    sortOrder: Int
  }

  entity "Sector" as sec {
    * id: String (PK)
    --
    code: String
    name: String
    description: String?
    category: String?
    riskProfile: String
    industryId: String (FK)
    isActive: Boolean
    sortOrder: Int
  }

  entity "IndustryFacilityTypes" as ift {
    * id: String (PK)
    --
    facilityTypeCode: String
    facilityTypeName: String
    description: String?
    category: String
    riskProfile: String
    industryId: String (FK)
    isActive: Boolean
    sortOrder: Int
  }

  entity "IndustryOperationalStreams" as ios {
    * id: String (PK)
    --
    industryId: String (FK)
    sector: String
    streamName: String
    description: String?
    category: String
    isActive: Boolean
    sortOrder: Int
  }

  entity "IndustryComplianceFramework" as icf {
    * id: String (PK)
    --
    industryId: String (FK)
    sector: String
    frameworkName: String
    description: String?
    category: String
    complianceRequirements: Json
    regulatoryFramework: Json
    isActive: Boolean
    sortOrder: Int
  }
}

' Canvas Version Control & Collaboration
package "Canvas Version Control & Collaboration" STRATEGIC_COLOR {
  entity "CanvasVersion" as cv {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    versionNumber: String
    description: String?
    changes: Json?
    createdById: String (FK)
  }

  entity "CanvasCollaborator" as cc2 {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    userId: String (FK)
    role: CollaboratorRole
    permissions: Json?
    lastActivity: DateTime?
    isActive: Boolean
  }

  entity "CanvasSharingSetting" as css {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    type: SharingType
    value: String
    permissions: Json?
    expiresAt: DateTime?
    isActive: Boolean
  }

  entity "CanvasExport" as ce2 {
    * id: String (PK)
    --
    businessCanvasId: String (FK)
    format: ExportFormat
    fileName: String
    fileSize: Int?
    exportedById: String (FK)
    metadata: Json?
  }

  entity "CanvasTemplate" as ct2 {
    * id: String (PK)
    --
    name: String
    description: String?
    category: TemplateCategory
    tags: String[]
    thumbnail: String?
    canvas: Json
    usageCount: Int
    rating: Float
    isPublic: Boolean
    createdById: String (FK)
  }
}

' Cross-Entity Relationships
package "Cross-Entity Relationships" AUDIT_COLOR {
  entity "ProcessControl" as pc2 {
    * processId: String (FK)
    * controlId: String (FK)
  }

  entity "AssetControl" as ac {
    * assetId: String (FK)
    * controlId: String (FK)
  }

  entity "ProcessPlaybook" as pp {
    * processId: String (FK)
    * playbookId: String (FK)
  }

  entity "ProcessMaturityScore" as pms {
    * processId: String (FK)
    * capability: String
    --
    score: Int
    maxScore: Int
    assessedAt: DateTime
  }
}

' Audit & Traceability
package "Audit & Traceability" AUDIT_COLOR {
  entity "AuditLog" as al {
    * id: String (PK)
    --
    userId: String (FK)
    action: String
    entity: String
    entityId: String
    changes: Json?
    timestamp: DateTime
  }
}

' ============================================================================
' RELATIONSHIPS
' ============================================================================

' Enterprise Information System Relationships
e ||--o{ ea : "has"
e ||--o{ f : "owns"
e ||--o{ bu : "contains"
e ||--o{ u : "employs"
e ||--o{ proc : "has"
e ||--o{ asset : "owns"
e ||--o{ bm : "has"
e ||--o{ bc : "has"

f ||--o{ bu : "contains"
f ||--o{ asset : "houses"
f ||--o{ proc : "executes"
f ||--o{ bc : "has"

bu ||--o{ d : "contains"
bu ||--o{ asset : "manages"
bu ||--o{ proc : "executes"
bu ||--o{ bc : "has"

d ||--o{ u : "employs"
d ||--o{ asset : "manages"
d ||--o{ proc : "executes"

' User Relationships
u ||--o{ proc : "creates"
u ||--o{ cc : "creates"
u ||--o{ asset : "creates"
u ||--o{ ma : "creates"
u ||--o{ al : "generates"
u ||--o{ vl : "submits"
u ||--o{ ra : "assigned_to"
u ||--o{ cv : "creates"
u ||--o{ cc2 : "creates"
u ||--o{ ce2 : "creates"
u ||--o{ ct2 : "creates"

' Business Canvas Relationships
bc ||--o{ vp : "contains"
bc ||--o{ cs : "contains"
bc ||--o{ rs : "contains"
bc ||--o{ p : "contains"
bc ||--o{ r : "contains"
bc ||--o{ a : "contains"
bc ||--o{ cost : "contains"
bc ||--o{ ch : "contains"
bc ||--o{ cv : "has_versions"
bc ||--o{ cc2 : "has_collaborators"
bc ||--o{ css : "has_sharing"
bc ||--o{ ce2 : "has_exports"

bc ||--o{ bc : "parent_child"

' Operating Model Relationships
om ||--o{ vc : "contains"
om ||--o{ sm : "contains"
om ||--o{ em : "contains"
om ||--o{ cm : "contains"
om ||--o{ op : "contains"

' Critical Control Relationships
cc ||--o{ vl : "has_verifications"
cc ||--o{ pc2 : "linked_to_processes"
cc ||--o{ ac : "linked_to_assets"
cc ||--o{ bm : "used_in"

rc ||--o{ cc : "categorizes"
ct ||--o{ cc : "types"
ce ||--o{ cc : "measures"

' Bowtie Model Relationships
bm ||--o{ t : "has_threats"
bm ||--o{ c : "has_consequences"
bm ||--o{ pc : "has_preventive_controls"
bm ||--o{ mc : "has_mitigating_controls"
bm ||--o{ bn : "has_nodes"

te ||--o{ bm : "analyzes"
t ||--o{ pc : "prevented_by"
c ||--o{ mc : "mitigated_by"

' Risk Propagation Relationships
rsig ||--o{ rp : "propagates_to"
rsig ||--o{ ra : "triggers"

rt ||--o{ rp : "defines"
rt ||--o{ ra : "triggers"

' Process Relationships
proc ||--o{ ps : "has_steps"
proc ||--o{ pi : "has_inputs"
proc ||--o{ po : "has_outputs"
proc ||--o{ pm : "has_metrics"
proc ||--o{ pr : "has_risks"
proc ||--o{ pc2 : "has_controls"
proc ||--o{ pp : "has_playbooks"
proc ||--o{ pms : "has_maturity_scores"

' Playbook Relationships
pb ||--o{ proc2 : "contains"
pb ||--o{ tm : "contains"
pb ||--o{ bp : "contains"
pb ||--o{ imp : "contains"
pb ||--o{ pp : "used_by_processes"

' Asset Relationships
asset ||--o{ ar : "has_risks"
asset ||--o{ ap : "has_protections"
asset ||--o{ am : "has_monitors"
asset ||--o{ ao : "has_optimisations"
asset ||--o{ ac : "has_controls"

' Maturity Assessment Relationships
ma ||--o{ caps : "has_scores"
ma ||--o{ ir : "has_roadmaps"
ma ||--o{ bench : "has_benchmarks"
ma ||--o{ prog : "has_progress"

' Industry Framework Relationships
ind ||--o{ sec : "has_sectors"
ind ||--o{ ift : "has_facility_types"
ind ||--o{ ios : "has_operational_streams"
ind ||--o{ icf : "has_compliance_frameworks"

' Canvas Template Relationships
ct2 ||--o{ bc : "derived_from"

' Cross-Entity Relationships
proc ||--o{ pc2 : "linked_to"
cc ||--o{ pc2 : "linked_to"
asset ||--o{ ac : "linked_to"
cc ||--o{ ac : "linked_to"
proc ||--o{ pp : "linked_to"
pb ||--o{ pp : "linked_to"
proc ||--o{ pms : "linked_to"

@enduml 