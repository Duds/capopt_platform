---
description: Apply when working with React components, UI interfaces, navigation patterns, implementation status indicators, strategic navigation flow components, page layouts, user experience patterns, accessibility features, responsive design, or any frontend-related code that involves user interface development, component composition, styling, or user interaction patterns.
alwaysApply: false
---

# Frontend Development Standards

## Overview
**Purpose:** Ensure consistent, high-quality frontend development with proper implementation status communication and strategic navigation flow integration.

## Core Principles

### 1. **Implementation Status Transparency**
- **Clear visual indicators** for implementation status
- **Consistent disabled states** for non-functional components
- **Honest communication** about feature capabilities
- **Progress tracking** in prominent locations

### 2. **Strategic Navigation Flow**
- **Layer-to-layer navigation** between operational and strategic components
- **Bidirectional flow** (operational‚Üístrategic, strategic‚Üíoperational)
- **Contextual navigation panels** showing strategic impact
- **Alignment indicators** between process execution and strategic objectives

### 3. **User Experience Excellence**
- **Intuitive navigation** patterns
- **Responsive design** across all devices
- **Accessibility compliance** (WCAG 2.1 AA)
- **Performance optimization** for fast interactions

### 4. **Code Quality**
- **TypeScript strict mode** for type safety
- **Component composition** over inheritance
- **Consistent naming conventions**
- **Proper error handling** and loading states

## Component Standards

### **Implementation Status Patterns**

#### **Functional Components**
```typescript
// ‚úÖ Fully implemented component
<Card>
  <CardHeader>
    <CardTitle className="flex items-center gap-2">
      Feature Name
      <Badge variant="secondary" className="text-xs">‚úì Real Data</Badge>
    </CardTitle>
  </CardHeader>
  <CardContent>
    {/* Real data content */}
  </CardContent>
</Card>
```

#### **Non-Functional Components**
```typescript
// ‚ùå Non-functional component
<Card className="opacity-50">
  <CardHeader>
    <CardTitle className="flex items-center gap-2">
      Feature Name
      <Badge variant="outline" className="text-xs">Not Implemented</Badge>
    </CardTitle>
  </CardHeader>
  <CardContent>
    {/* Mock data content */}
  </CardContent>
</Card>
```

### **Strategic Navigation Flow Patterns**

#### **Breadcrumb Navigation**
```typescript
// Fully implemented navigation
<Breadcrumb className="text-sm">
  <BreadcrumbItem>Process Maps</BreadcrumbItem>
  <BreadcrumbSeparator />
  <BreadcrumbItem>Equipment Maintenance</BreadcrumbItem>
  <BreadcrumbSeparator />
  <BreadcrumbItem>Service Model</BreadcrumbItem>
</Breadcrumb>

// Disabled navigation for unimplemented layers
<Breadcrumb className="text-sm opacity-50">
  <BreadcrumbItem>Process Maps</BreadcrumbItem>
  <BreadcrumbSeparator />
  <BreadcrumbItem className="text-muted-foreground">Service Model</BreadcrumbItem>
  <Badge variant="outline" className="ml-2 text-xs">Not Implemented</Badge>
</Breadcrumb>
```

#### **Strategic Context Panel**
```typescript
// Active strategic navigation context
<Card>
  <CardHeader>
    <CardTitle>Strategic Navigation Context</CardTitle>
  </CardHeader>
  <CardContent>
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      <div className="text-center">
        <Button variant="outline" size="sm" className="w-full">
          üîó Service Model
        </Button>
        <p className="text-xs mt-1">85% Aligned</p>
      </div>
      <div className="text-center opacity-50">
        <Button variant="outline" size="sm" className="w-full" disabled>
          üîó Value Chain
        </Button>
        <Badge variant="outline" className="mt-1 text-xs">Not Implemented</Badge>
      </div>
    </div>
  </CardContent>
</Card>
```

#### **Alignment Indicators**
```typescript
// Strategic alignment scoring
<div className="flex items-center gap-2">
  <div className="flex-1">
    <div className="flex justify-between text-sm">
      <span>Strategic Alignment</span>
      <span>87%</span>
    </div>
    <Progress value={87} className="h-2" />
  </div>
  <Badge variant="secondary">High Alignment</Badge>
</div>
```

## Navigation Flow Standards

### **Layer Navigation Patterns**

#### **Process Maps to Service Model**
```typescript
// Navigation button in process detail view
<Button 
  variant="outline" 
  onClick={() => router.push(`/service-model/${process.serviceModelId}`)}
  className="flex items-center gap-2"
>
  <ServiceIcon className="h-4 w-4" />
  View Service Model
  <Badge variant="secondary" className="text-xs">85% Aligned</Badge>
</Button>
```

#### **Service Model to Value Chain**
```typescript
// Navigation button in service model view
<Button 
  variant="outline" 
  onClick={() => router.push(`/value-chain/${serviceModel.valueChainId}`)}
  className="flex items-center gap-2"
>
  <ValueChainIcon className="h-4 w-4" />
  View Value Chain
  <Badge variant="secondary" className="text-xs">92% Aligned</Badge>
</Button>
```

#### **Value Chain to Operating Model**
```typescript
// Navigation button in value chain view
<Button 
  variant="outline" 
  onClick={() => router.push(`/operating-model/${valueChain.operatingModelId}`)}
  className="flex items-center gap-2"
>
  <OperatingModelIcon className="h-4 w-4" />
  View Operating Model
  <Badge variant="secondary" className="text-xs">78% Aligned</Badge>
</Button>
```

#### **Operating Model to Business Canvas**
```typescript
// Navigation button in operating model view
<Button 
  variant="outline" 
  onClick={() => router.push(`/strategic`)}
  className="flex items-center gap-2"
>
  <BusinessCanvasIcon className="h-4 w-4" />
  View Business Canvas
  <Badge variant="secondary" className="text-xs">90% Aligned</Badge>
</Button>
```

### **Disabled Navigation Patterns**

#### **Unimplemented Layer Navigation**
```typescript
// Disabled navigation for unimplemented layers
<Button 
  variant="outline" 
  disabled 
  className="flex items-center gap-2 opacity-50"
>
  <ServiceIcon className="h-4 w-4" />
  Service Model
  <Badge variant="outline" className="text-xs">Coming Soon</Badge>
</Button>
```

#### **Contextual Navigation Panel**
```typescript
// Strategic context panel with disabled layers
<div className="grid grid-cols-2 md:grid-cols-4 gap-4">
  {/* Implemented layer */}
  <div className="text-center">
    <Button variant="outline" size="sm" className="w-full">
      üîó Service Model
    </Button>
    <p className="text-xs mt-1">85% Aligned</p>
  </div>
  
  {/* Unimplemented layer */}
  <div className="text-center opacity-50">
    <Button variant="outline" size="sm" className="w-full" disabled>
      üîó Value Chain
    </Button>
    <Badge variant="outline" className="mt-1 text-xs">Not Implemented</Badge>
  </div>
</div>
```

## Page Structure Standards

### **Process Detail Page**
```typescript
// Process detail page with strategic navigation
<div className="min-h-screen bg-gray-50">
  <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    {/* Header with breadcrumbs */}
    <div className="mb-8">
      <Breadcrumb>
        <BreadcrumbItem>Process Maps</BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>{process.name}</BreadcrumbItem>
      </Breadcrumb>
      <h1 className="text-3xl font-bold text-gray-900 mt-4">{process.name}</h1>
    </div>
    
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Main content */}
      <div className="lg:col-span-2">
        {/* Process details */}
      </div>
      
      {/* Strategic navigation sidebar */}
      <div className="space-y-6">
        <StrategicContextPanel process={process} />
        <AlignmentIndicators process={process} />
      </div>
    </div>
  </div>
</div>
```

### **Service Model Page**
```typescript
// Service model page with navigation flow
<div className="min-h-screen bg-gray-50">
  <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    {/* Header with navigation */}
    <div className="mb-8">
      <Breadcrumb>
        <BreadcrumbItem>Process Maps</BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>Equipment Maintenance</BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>Service Model</BreadcrumbItem>
      </Breadcrumb>
      <h1 className="text-3xl font-bold text-gray-900 mt-4">Service Model</h1>
    </div>
    
    {/* Service blueprint content */}
    <ServiceBlueprint serviceModel={serviceModel} />
    
    {/* Navigation footer */}
    <div className="mt-8 flex justify-between">
      <Button variant="outline" onClick={() => router.back()}>
        ‚Üê Back to Process
      </Button>
      <Button variant="outline" onClick={() => router.push(`/value-chain/${serviceModel.valueChainId}`)}>
        Value Chain ‚Üí
      </Button>
    </div>
  </div>
</div>
```

## Component Composition Standards

### **Strategic Navigation Components**

#### **StrategicContextPanel**
```typescript
interface StrategicContextPanelProps {
  process: Process
  alignmentScores: {
    serviceModel: number
    valueChain: number
    operatingModel: number
    businessCanvas: number
  }
}

const StrategicContextPanel: React.FC<StrategicContextPanelProps> = ({
  process,
  alignmentScores
}) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Strategic Navigation Context</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <NavigationLayerButton
            layer="serviceModel"
            alignment={alignmentScores.serviceModel}
            implemented={true}
          />
          <NavigationLayerButton
            layer="valueChain"
            alignment={alignmentScores.valueChain}
            implemented={false}
          />
          {/* Additional layers */}
        </div>
      </CardContent>
    </Card>
  )
}
```

#### **AlignmentIndicators**
```typescript
interface AlignmentIndicatorsProps {
  process: Process
  alignmentScore: number
}

const AlignmentIndicators: React.FC<AlignmentIndicatorsProps> = ({
  process,
  alignmentScore
}) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Strategic Alignment</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex items-center gap-2">
          <div className="flex-1">
            <div className="flex justify-between text-sm">
              <span>Overall Alignment</span>
              <span>{alignmentScore}%</span>
            </div>
            <Progress value={alignmentScore} className="h-2" />
          </div>
          <Badge variant={alignmentScore > 80 ? "secondary" : "destructive"}>
            {alignmentScore > 80 ? "High Alignment" : "Needs Attention"}
          </Badge>
        </div>
      </CardContent>
    </Card>
  )
}
```

## Error Handling Standards

### **Navigation Error Handling**
```typescript
// Handle navigation errors gracefully
const handleNavigation = async (route: string) => {
  try {
    setIsNavigating(true)
    await router.push(route)
  } catch (error) {
    console.error('Navigation error:', error)
    toast({
      title: "Navigation Error",
      description: "Unable to navigate to the requested page. Please try again.",
      variant: "destructive"
    })
  } finally {
    setIsNavigating(false)
  }
}
```

### **Loading States**
```typescript
// Loading state for navigation
<Button 
  variant="outline" 
  onClick={handleNavigation}
  disabled={isNavigating}
  className="flex items-center gap-2"
>
  {isNavigating ? (
    <Loader2 className="h-4 w-4 animate-spin" />
  ) : (
    <ServiceIcon className="h-4 w-4" />
  )}
  {isNavigating ? "Navigating..." : "Service Model"}
</Button>
```

## Accessibility Standards

### **Navigation Accessibility**
```typescript
// Accessible navigation with proper ARIA labels
<Button 
  variant="outline"
  onClick={handleNavigation}
  aria-label={`Navigate to ${layerName} (${alignmentScore}% aligned)`}
  aria-describedby={`${layerName}-description`}
>
  <Icon className="h-4 w-4 mr-2" />
  {layerName}
  <Badge variant="secondary" className="ml-2">{alignmentScore}%</Badge>
</Button>
<div id={`${layerName}-description`} className="sr-only">
  This layer is {alignmentScore}% aligned with the current process
</div>
```

### **Breadcrumb Accessibility**
```typescript
// Accessible breadcrumb navigation
<nav aria-label="Breadcrumb">
  <Breadcrumb>
    <BreadcrumbItem>
      <BreadcrumbLink href="/processes">Process Maps</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem aria-current="page">
      {currentProcess.name}
    </BreadcrumbItem>
  </Breadcrumb>
</nav>
```

## Performance Standards

### **Navigation Performance**
- **Preload critical navigation routes** for faster transitions
- **Lazy load non-critical navigation components**
- **Optimize bundle size** for navigation-related code
- **Cache navigation state** to reduce API calls

### **Component Optimization**
```typescript
// Optimize navigation components with React.memo
const NavigationLayerButton = React.memo<NavigationLayerButtonProps>(({
  layer,
  alignment,
  implemented
}) => {
  // Component implementation
})

// Use dynamic imports for navigation pages
const ServiceModelPage = dynamic(() => import('./ServiceModelPage'), {
  loading: () => <NavigationLoading />
})
```

## Testing Standards

### **Navigation Flow Testing**
```typescript
// Test navigation flow functionality
describe('Strategic Navigation Flow', () => {
  it('should navigate from process to service model', async () => {
    render(<ProcessDetailPage />)
    
    const serviceModelButton = screen.getByRole('button', { name: /service model/i })
    expect(serviceModelButton).toBeInTheDocument()
    
    await userEvent.click(serviceModelButton)
    
    expect(mockRouter.push).toHaveBeenCalledWith('/service-model/123')
  })
  
  it('should show disabled state for unimplemented layers', () => {
    render(<ProcessDetailPage />)
    
    const valueChainButton = screen.getByRole('button', { name: /value chain/i })
    expect(valueChainButton).toBeDisabled()
    expect(valueChainButton).toHaveClass('opacity-50')
  })
})
```

## Documentation Standards

### **Navigation Flow Documentation**
- **Wireframes and user journeys** for each navigation path
- **Component API documentation** for navigation components
- **Alignment scoring methodology** and metrics
- **User training materials** for navigation features

### **Code Documentation**
```typescript
/**
 * Strategic Navigation Context Panel
 * 
 * Displays the strategic context for a process, showing alignment
 * with higher-level strategic layers and providing navigation
 * to those layers.
 * 
 * @param process - The current process being viewed
 * @param alignmentScores - Alignment scores for each strategic layer
 * @param onNavigate - Callback for navigation events
 * 
 * @example
 * <StrategicContextPanel
 *   process={currentProcess}
 *   alignmentScores={{
 *     serviceModel: 85,
 *     valueChain: 92,
 *     operatingModel: 78,
 *     businessCanvas: 90
 *   }}
 *   onNavigate={handleNavigation}
 * />
 */
```

---

**Next Steps**: Implement Service Model as the next layer in the strategic navigation flow, following these frontend standards for consistent user experience.



**Next Steps**: Implement Service Model as the next layer in the strategic navigation flow, following these frontend standards for consistent user experience.


